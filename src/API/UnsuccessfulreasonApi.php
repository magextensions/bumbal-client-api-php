<?php
/**
 * UnsuccessfulreasonApi
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\API;

use \BumbalClient\ApiClient;
use \BumbalClient\ApiException;
use \BumbalClient\Configuration;
use \BumbalClient\ObjectSerializer;

/**
 * UnsuccessfulreasonApi Class Doc Comment
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UnsuccessfulreasonApi
{
    /**
     * API Client
     *
     * @var \BumbalClient\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \BumbalClient\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\BumbalClient\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \BumbalClient\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \BumbalClient\ApiClient $apiClient set the API client
     *
     * @return UnsuccessfulreasonApi
     */
    public function setApiClient(\BumbalClient\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation createUnsuccessfulReason
     *
     * Add a new UnsuccessfulReason
     *
     * @param \BumbalClient\Model\UnsuccessfulReasonModel $body UnsuccessfulReason object that needs to be created (optional)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return \BumbalClient\Model\ApiResponse53
     */
    public function createUnsuccessfulReason($body = null)
    {
        list($response) = $this->createUnsuccessfulReasonWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createUnsuccessfulReasonWithHttpInfo
     *
     * Add a new UnsuccessfulReason
     *
     * @param \BumbalClient\Model\UnsuccessfulReasonModel $body UnsuccessfulReason object that needs to be created (optional)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return array of \BumbalClient\Model\ApiResponse53, HTTP status code, HTTP response headers (array of strings)
     */
    public function createUnsuccessfulReasonWithHttpInfo($body = null)
    {
        // parse inputs
        $resourcePath = "/unsuccessful-reason";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalClient\Model\ApiResponse53',
                '/unsuccessful-reason'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalClient\Model\ApiResponse53', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse53', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse403', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse405', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteUnsuccessfulReason
     *
     * Delete a UnsuccessfulReason entry
     *
     * @param int $unsuccessful_reason_id ID of UnsuccessfulReason to delete (required)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return \BumbalClient\Model\ApiResponse51
     */
    public function deleteUnsuccessfulReason($unsuccessful_reason_id)
    {
        list($response) = $this->deleteUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id);
        return $response;
    }

    /**
     * Operation deleteUnsuccessfulReasonWithHttpInfo
     *
     * Delete a UnsuccessfulReason entry
     *
     * @param int $unsuccessful_reason_id ID of UnsuccessfulReason to delete (required)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return array of \BumbalClient\Model\ApiResponse51, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id)
    {
        // verify the required parameter 'unsuccessful_reason_id' is set
        if ($unsuccessful_reason_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $unsuccessful_reason_id when calling deleteUnsuccessfulReason');
        }
        // parse inputs
        $resourcePath = "/unsuccessful-reason/{unsuccessful-reasonId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($unsuccessful_reason_id !== null) {
            $resourcePath = str_replace(
                "{" . "unsuccessful-reasonId" . "}",
                $this->apiClient->getSerializer()->toPathValue($unsuccessful_reason_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalClient\Model\ApiResponse51',
                '/unsuccessful-reason/{unsuccessful-reasonId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalClient\Model\ApiResponse51', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse51', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse403', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse52', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse405', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveListUnsuccessfulReason
     *
     * Retrieve List of UnsuccessfulReason
     *
     * @param \BumbalClient\Model\UnsuccessfulReasonRetrieveListArguments $arguments UnsuccessfulReason RetrieveList Arguments (required)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return \BumbalClient\Model\UnsuccessfulReasonListResponse
     */
    public function retrieveListUnsuccessfulReason($arguments)
    {
        list($response) = $this->retrieveListUnsuccessfulReasonWithHttpInfo($arguments);
        return $response;
    }

    /**
     * Operation retrieveListUnsuccessfulReasonWithHttpInfo
     *
     * Retrieve List of UnsuccessfulReason
     *
     * @param \BumbalClient\Model\UnsuccessfulReasonRetrieveListArguments $arguments UnsuccessfulReason RetrieveList Arguments (required)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return array of \BumbalClient\Model\UnsuccessfulReasonListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveListUnsuccessfulReasonWithHttpInfo($arguments)
    {
        // verify the required parameter 'arguments' is set
        if ($arguments === null) {
            throw new \InvalidArgumentException('Missing the required parameter $arguments when calling retrieveListUnsuccessfulReason');
        }
        // parse inputs
        $resourcePath = "/unsuccessful-reason";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // body params
        $_tempBody = null;
        if (isset($arguments)) {
            $_tempBody = $arguments;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalClient\Model\UnsuccessfulReasonListResponse',
                '/unsuccessful-reason'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalClient\Model\UnsuccessfulReasonListResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\UnsuccessfulReasonListResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse403', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse405', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation retrieveUnsuccessfulReason
     *
     * Retrieve a UnsuccessfulReason
     *
     * @param int $unsuccessful_reason_id ID of UnsuccessfulReason to retrieve (required)
     * @param bool $include_object_type_name Show the name of the object type (optional, default to false)
     * @param bool $include_record_info Show the record info (optional, default to false)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return \BumbalClient\Model\UnsuccessfulReasonModel
     */
    public function retrieveUnsuccessfulReason($unsuccessful_reason_id, $include_object_type_name = 'false', $include_record_info = 'false')
    {
        list($response) = $this->retrieveUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id, $include_object_type_name, $include_record_info);
        return $response;
    }

    /**
     * Operation retrieveUnsuccessfulReasonWithHttpInfo
     *
     * Retrieve a UnsuccessfulReason
     *
     * @param int $unsuccessful_reason_id ID of UnsuccessfulReason to retrieve (required)
     * @param bool $include_object_type_name Show the name of the object type (optional, default to false)
     * @param bool $include_record_info Show the record info (optional, default to false)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return array of \BumbalClient\Model\UnsuccessfulReasonModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id, $include_object_type_name = 'false', $include_record_info = 'false')
    {
        // verify the required parameter 'unsuccessful_reason_id' is set
        if ($unsuccessful_reason_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $unsuccessful_reason_id when calling retrieveUnsuccessfulReason');
        }
        // parse inputs
        $resourcePath = "/unsuccessful-reason/{unsuccessful-reasonId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // query params
        if ($include_object_type_name !== null) {
            $queryParams['include_object_type_name'] = $this->apiClient->getSerializer()->toQueryValue($include_object_type_name);
        }
        // query params
        if ($include_record_info !== null) {
            $queryParams['include_record_info'] = $this->apiClient->getSerializer()->toQueryValue($include_record_info);
        }
        // path params
        if ($unsuccessful_reason_id !== null) {
            $resourcePath = str_replace(
                "{" . "unsuccessful-reasonId" . "}",
                $this->apiClient->getSerializer()->toPathValue($unsuccessful_reason_id),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalClient\Model\UnsuccessfulReasonModel',
                '/unsuccessful-reason/{unsuccessful-reasonId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalClient\Model\UnsuccessfulReasonModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\UnsuccessfulReasonModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse403', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse405', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateUnsuccessfulReason
     *
     * Update a specific UnsuccessfulReason object
     *
     * @param int $unsuccessful_reason_id ID of the UnsuccessfulReason object to update (required)
     * @param \BumbalClient\Model\UnsuccessfulReasonModel $body UnsuccessfulReason object that needs to be updated (optional)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return \BumbalClient\Model\ApiResponse50
     */
    public function updateUnsuccessfulReason($unsuccessful_reason_id, $body = null)
    {
        list($response) = $this->updateUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id, $body);
        return $response;
    }

    /**
     * Operation updateUnsuccessfulReasonWithHttpInfo
     *
     * Update a specific UnsuccessfulReason object
     *
     * @param int $unsuccessful_reason_id ID of the UnsuccessfulReason object to update (required)
     * @param \BumbalClient\Model\UnsuccessfulReasonModel $body UnsuccessfulReason object that needs to be updated (optional)
     * @throws \BumbalClient\ApiException on non-2xx response
     * @return array of \BumbalClient\Model\ApiResponse50, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateUnsuccessfulReasonWithHttpInfo($unsuccessful_reason_id, $body = null)
    {
        // verify the required parameter 'unsuccessful_reason_id' is set
        if ($unsuccessful_reason_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $unsuccessful_reason_id when calling updateUnsuccessfulReason');
        }
        // parse inputs
        $resourcePath = "/unsuccessful-reason/{unsuccessful-reasonId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json', 'application/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json', 'application/xml']);

        // path params
        if ($unsuccessful_reason_id !== null) {
            $resourcePath = str_replace(
                "{" . "unsuccessful-reasonId" . "}",
                $this->apiClient->getSerializer()->toPathValue($unsuccessful_reason_id),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('ApiKey');
        if (strlen($apiKey) !== 0) {
            $headerParams['ApiKey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\BumbalClient\Model\ApiResponse50',
                '/unsuccessful-reason/{unsuccessful-reasonId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\BumbalClient\Model\ApiResponse50', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse50', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse401', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse403', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\BumbalClient\Model\ApiResponse405', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
