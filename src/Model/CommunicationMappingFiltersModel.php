<?php
/**
 * CommunicationMappingFiltersModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * CommunicationMappingFiltersModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CommunicationMappingFiltersModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'CommunicationMappingFiltersModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int[]',
        'communication_template_id' => 'int[]',
        'communication_template_name' => 'string[]',
        'communication_message_type_id' => 'int[]',
        'communication_message_type_name' => 'string[]',
        'communication_delivery_method_id' => 'int[]',
        'communication_delivery_method_name' => 'string[]',
        'tag_names' => 'string[]',
        'zone_names' => 'string[]',
        'links' => 'object[]',
        'updated_at_since' => '\DateTime',
        'updated_at_till' => '\DateTime',
        'created_at_since' => '\DateTime',
        'created_at_till' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'communication_template_id' => null,
        'communication_template_name' => null,
        'communication_message_type_id' => null,
        'communication_message_type_name' => null,
        'communication_delivery_method_id' => null,
        'communication_delivery_method_name' => null,
        'tag_names' => null,
        'zone_names' => null,
        'links' => null,
        'updated_at_since' => 'date-time',
        'updated_at_till' => 'date-time',
        'created_at_since' => 'date-time',
        'created_at_till' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'communication_template_id' => 'communication_template_id',
        'communication_template_name' => 'communication_template_name',
        'communication_message_type_id' => 'communication_message_type_id',
        'communication_message_type_name' => 'communication_message_type_name',
        'communication_delivery_method_id' => 'communication_delivery_method_id',
        'communication_delivery_method_name' => 'communication_delivery_method_name',
        'tag_names' => 'tag_names',
        'zone_names' => 'zone_names',
        'links' => 'links',
        'updated_at_since' => 'updated_at_since',
        'updated_at_till' => 'updated_at_till',
        'created_at_since' => 'created_at_since',
        'created_at_till' => 'created_at_till'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'communication_template_id' => 'setCommunicationTemplateId',
        'communication_template_name' => 'setCommunicationTemplateName',
        'communication_message_type_id' => 'setCommunicationMessageTypeId',
        'communication_message_type_name' => 'setCommunicationMessageTypeName',
        'communication_delivery_method_id' => 'setCommunicationDeliveryMethodId',
        'communication_delivery_method_name' => 'setCommunicationDeliveryMethodName',
        'tag_names' => 'setTagNames',
        'zone_names' => 'setZoneNames',
        'links' => 'setLinks',
        'updated_at_since' => 'setUpdatedAtSince',
        'updated_at_till' => 'setUpdatedAtTill',
        'created_at_since' => 'setCreatedAtSince',
        'created_at_till' => 'setCreatedAtTill'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'communication_template_id' => 'getCommunicationTemplateId',
        'communication_template_name' => 'getCommunicationTemplateName',
        'communication_message_type_id' => 'getCommunicationMessageTypeId',
        'communication_message_type_name' => 'getCommunicationMessageTypeName',
        'communication_delivery_method_id' => 'getCommunicationDeliveryMethodId',
        'communication_delivery_method_name' => 'getCommunicationDeliveryMethodName',
        'tag_names' => 'getTagNames',
        'zone_names' => 'getZoneNames',
        'links' => 'getLinks',
        'updated_at_since' => 'getUpdatedAtSince',
        'updated_at_till' => 'getUpdatedAtTill',
        'created_at_since' => 'getCreatedAtSince',
        'created_at_till' => 'getCreatedAtTill'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['communication_template_id'] = isset($data['communication_template_id']) ? $data['communication_template_id'] : null;
        $this->container['communication_template_name'] = isset($data['communication_template_name']) ? $data['communication_template_name'] : null;
        $this->container['communication_message_type_id'] = isset($data['communication_message_type_id']) ? $data['communication_message_type_id'] : null;
        $this->container['communication_message_type_name'] = isset($data['communication_message_type_name']) ? $data['communication_message_type_name'] : null;
        $this->container['communication_delivery_method_id'] = isset($data['communication_delivery_method_id']) ? $data['communication_delivery_method_id'] : null;
        $this->container['communication_delivery_method_name'] = isset($data['communication_delivery_method_name']) ? $data['communication_delivery_method_name'] : null;
        $this->container['tag_names'] = isset($data['tag_names']) ? $data['tag_names'] : null;
        $this->container['zone_names'] = isset($data['zone_names']) ? $data['zone_names'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['updated_at_since'] = isset($data['updated_at_since']) ? $data['updated_at_since'] : null;
        $this->container['updated_at_till'] = isset($data['updated_at_till']) ? $data['updated_at_till'] : null;
        $this->container['created_at_since'] = isset($data['created_at_since']) ? $data['created_at_since'] : null;
        $this->container['created_at_till'] = isset($data['created_at_till']) ? $data['created_at_till'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int[]
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int[] $id Bumbal communication mapping id's
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets communication_template_id
     * @return int[]
     */
    public function getCommunicationTemplateId()
    {
        return $this->container['communication_template_id'];
    }

    /**
     * Sets communication_template_id
     * @param int[] $communication_template_id Bumbal communication template id's
     * @return $this
     */
    public function setCommunicationTemplateId($communication_template_id)
    {
        $this->container['communication_template_id'] = $communication_template_id;

        return $this;
    }

    /**
     * Gets communication_template_name
     * @return string[]
     */
    public function getCommunicationTemplateName()
    {
        return $this->container['communication_template_name'];
    }

    /**
     * Sets communication_template_name
     * @param string[] $communication_template_name Bumbal communication template names
     * @return $this
     */
    public function setCommunicationTemplateName($communication_template_name)
    {
        $this->container['communication_template_name'] = $communication_template_name;

        return $this;
    }

    /**
     * Gets communication_message_type_id
     * @return int[]
     */
    public function getCommunicationMessageTypeId()
    {
        return $this->container['communication_message_type_id'];
    }

    /**
     * Sets communication_message_type_id
     * @param int[] $communication_message_type_id Bumbal communication message type id's. Possible options: 1 (=cancelled), 2 (=invite), 3 (=planned), 4 (=eta), 5 (=executed), 6 (=pref_confirmation), 7 (=reminder)
     * @return $this
     */
    public function setCommunicationMessageTypeId($communication_message_type_id)
    {
        $this->container['communication_message_type_id'] = $communication_message_type_id;

        return $this;
    }

    /**
     * Gets communication_message_type_name
     * @return string[]
     */
    public function getCommunicationMessageTypeName()
    {
        return $this->container['communication_message_type_name'];
    }

    /**
     * Sets communication_message_type_name
     * @param string[] $communication_message_type_name Bumbal communication message type names. Possible options: cancelled, invite, planned, eta, executed, pref_confirmation, reminder
     * @return $this
     */
    public function setCommunicationMessageTypeName($communication_message_type_name)
    {
        $this->container['communication_message_type_name'] = $communication_message_type_name;

        return $this;
    }

    /**
     * Gets communication_delivery_method_id
     * @return int[]
     */
    public function getCommunicationDeliveryMethodId()
    {
        return $this->container['communication_delivery_method_id'];
    }

    /**
     * Sets communication_delivery_method_id
     * @param int[] $communication_delivery_method_id Bumbal communication delivery method id's. possible optiones: 1 (=email), 2 (=sms)
     * @return $this
     */
    public function setCommunicationDeliveryMethodId($communication_delivery_method_id)
    {
        $this->container['communication_delivery_method_id'] = $communication_delivery_method_id;

        return $this;
    }

    /**
     * Gets communication_delivery_method_name
     * @return string[]
     */
    public function getCommunicationDeliveryMethodName()
    {
        return $this->container['communication_delivery_method_name'];
    }

    /**
     * Sets communication_delivery_method_name
     * @param string[] $communication_delivery_method_name Bumbal communication delivery method names. possible optiones: email, sms
     * @return $this
     */
    public function setCommunicationDeliveryMethodName($communication_delivery_method_name)
    {
        $this->container['communication_delivery_method_name'] = $communication_delivery_method_name;

        return $this;
    }

    /**
     * Gets tag_names
     * @return string[]
     */
    public function getTagNames()
    {
        return $this->container['tag_names'];
    }

    /**
     * Sets tag_names
     * @param string[] $tag_names Tag names
     * @return $this
     */
    public function setTagNames($tag_names)
    {
        $this->container['tag_names'] = $tag_names;

        return $this;
    }

    /**
     * Gets zone_names
     * @return string[]
     */
    public function getZoneNames()
    {
        return $this->container['zone_names'];
    }

    /**
     * Sets zone_names
     * @param string[] $zone_names Zone names
     * @return $this
     */
    public function setZoneNames($zone_names)
    {
        $this->container['zone_names'] = $zone_names;

        return $this;
    }

    /**
     * Gets links
     * @return object[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param object[] $links Activity Link ids
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets updated_at_since
     * @return \DateTime
     */
    public function getUpdatedAtSince()
    {
        return $this->container['updated_at_since'];
    }

    /**
     * Sets updated_at_since
     * @param \DateTime $updated_at_since Show updated since
     * @return $this
     */
    public function setUpdatedAtSince($updated_at_since)
    {
        $this->container['updated_at_since'] = $updated_at_since;

        return $this;
    }

    /**
     * Gets updated_at_till
     * @return \DateTime
     */
    public function getUpdatedAtTill()
    {
        return $this->container['updated_at_till'];
    }

    /**
     * Sets updated_at_till
     * @param \DateTime $updated_at_till Show updated till
     * @return $this
     */
    public function setUpdatedAtTill($updated_at_till)
    {
        $this->container['updated_at_till'] = $updated_at_till;

        return $this;
    }

    /**
     * Gets created_at_since
     * @return \DateTime
     */
    public function getCreatedAtSince()
    {
        return $this->container['created_at_since'];
    }

    /**
     * Sets created_at_since
     * @param \DateTime $created_at_since Show created since
     * @return $this
     */
    public function setCreatedAtSince($created_at_since)
    {
        $this->container['created_at_since'] = $created_at_since;

        return $this;
    }

    /**
     * Gets created_at_till
     * @return \DateTime
     */
    public function getCreatedAtTill()
    {
        return $this->container['created_at_till'];
    }

    /**
     * Sets created_at_till
     * @param \DateTime $created_at_till Show created till
     * @return $this
     */
    public function setCreatedAtTill($created_at_till)
    {
        $this->container['created_at_till'] = $created_at_till;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


