<?php
/**
 * SettingsGetConstantsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * SettingsGetConstantsResponse Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SettingsGetConstantsResponse implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SettingsGetConstantsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'irregularity_category' => 'map[string,string]',
        'irregularity_cause' => 'map[string,string]',
        'instruction_type' => 'map[string,string]',
        'reference_type' => 'map[string,string]',
        'relation_type' => 'map[string,string]',
        'week_day' => 'map[string,string]',
        'action_type' => 'map[string,string]',
        'activity_type' => 'map[string,string]',
        'special_activity' => 'map[string,string]',
        'ae_activity' => 'map[string,string]',
        'address_type' => 'map[string,string]',
        'ae_address_type' => 'map[string,string]',
        'communication_delivery_method' => 'map[string,string]',
        'communication_message_type' => 'map[string,string]',
        'counter' => 'map[string,string]',
        'equipment_type' => 'map[string,string]',
        'file_type' => 'map[string,string]',
        'incoterm' => 'map[string,string]',
        'log_type' => 'map[string,string]',
        'object_type' => 'map[string,string]',
        'optimisation_objective' => 'map[string,string]',
        'party_type' => 'map[string,string]',
        'phone_nr_type' => 'map[string,string]',
        'recurrence_period' => 'map[string,string]',
        'recurrence_type' => 'map[string,string]',
        'role' => 'map[string,string]',
        'saywhen_status' => 'map[string,string]',
        'settings' => 'map[string,string]',
        'settings_group' => 'map[string,string]',
        'status_type' => 'map[string,string]',
        'route_status' => 'map[string,string]',
        'activity_status' => 'map[string,string]',
        'shipment_status' => 'map[string,string]',
        'package_line_status' => 'map[string,string]',
        'assignment_status' => 'map[string,string]',
        'message_status' => 'map[string,string]',
        'user_status' => 'map[string,string]',
        'job_status' => 'map[string,string]',
        'api_request_status' => 'map[string,string]',
        'system_provider' => 'map[string,string]',
        'provider' => 'map[string,string]',
        'time_slot_type' => 'map[string,string]',
        'transaction_type' => 'map[string,string]',
        'uom' => 'map[string,string]',
        'uom_group' => 'map[string,string]',
        'vehicle_type' => 'map[string,string]',
        'package_type' => 'map[string,string]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'irregularity_category' => null,
        'irregularity_cause' => null,
        'instruction_type' => null,
        'reference_type' => null,
        'relation_type' => null,
        'week_day' => null,
        'action_type' => null,
        'activity_type' => null,
        'special_activity' => null,
        'ae_activity' => null,
        'address_type' => null,
        'ae_address_type' => null,
        'communication_delivery_method' => null,
        'communication_message_type' => null,
        'counter' => null,
        'equipment_type' => null,
        'file_type' => null,
        'incoterm' => null,
        'log_type' => null,
        'object_type' => null,
        'optimisation_objective' => null,
        'party_type' => null,
        'phone_nr_type' => null,
        'recurrence_period' => null,
        'recurrence_type' => null,
        'role' => null,
        'saywhen_status' => null,
        'settings' => null,
        'settings_group' => null,
        'status_type' => null,
        'route_status' => null,
        'activity_status' => null,
        'shipment_status' => null,
        'package_line_status' => null,
        'assignment_status' => null,
        'message_status' => null,
        'user_status' => null,
        'job_status' => null,
        'api_request_status' => null,
        'system_provider' => null,
        'provider' => null,
        'time_slot_type' => null,
        'transaction_type' => null,
        'uom' => null,
        'uom_group' => null,
        'vehicle_type' => null,
        'package_type' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'irregularity_category' => 'irregularity_category',
        'irregularity_cause' => 'irregularity_cause',
        'instruction_type' => 'instruction_type',
        'reference_type' => 'reference_type',
        'relation_type' => 'relation_type',
        'week_day' => 'week_day',
        'action_type' => 'action_type',
        'activity_type' => 'activity_type',
        'special_activity' => 'special_activity',
        'ae_activity' => 'ae_activity',
        'address_type' => 'address_type',
        'ae_address_type' => 'ae_address_type',
        'communication_delivery_method' => 'communication_delivery_method',
        'communication_message_type' => 'communication_message_type',
        'counter' => 'counter',
        'equipment_type' => 'equipment_type',
        'file_type' => 'file_type',
        'incoterm' => 'incoterm',
        'log_type' => 'log_type',
        'object_type' => 'object_type',
        'optimisation_objective' => 'optimisation_objective',
        'party_type' => 'party_type',
        'phone_nr_type' => 'phone_nr_type',
        'recurrence_period' => 'recurrence_period',
        'recurrence_type' => 'recurrence_type',
        'role' => 'role',
        'saywhen_status' => 'saywhen_status',
        'settings' => 'settings',
        'settings_group' => 'settings_group',
        'status_type' => 'status_type',
        'route_status' => 'route_status',
        'activity_status' => 'activity_status',
        'shipment_status' => 'shipment_status',
        'package_line_status' => 'package_line_status',
        'assignment_status' => 'assignment_status',
        'message_status' => 'message_status',
        'user_status' => 'user_status',
        'job_status' => 'job_status',
        'api_request_status' => 'api_request_status',
        'system_provider' => 'system_provider',
        'provider' => 'provider',
        'time_slot_type' => 'time_slot_type',
        'transaction_type' => 'transaction_type',
        'uom' => 'uom',
        'uom_group' => 'uom_group',
        'vehicle_type' => 'vehicle_type',
        'package_type' => 'package_type'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'irregularity_category' => 'setIrregularityCategory',
        'irregularity_cause' => 'setIrregularityCause',
        'instruction_type' => 'setInstructionType',
        'reference_type' => 'setReferenceType',
        'relation_type' => 'setRelationType',
        'week_day' => 'setWeekDay',
        'action_type' => 'setActionType',
        'activity_type' => 'setActivityType',
        'special_activity' => 'setSpecialActivity',
        'ae_activity' => 'setAeActivity',
        'address_type' => 'setAddressType',
        'ae_address_type' => 'setAeAddressType',
        'communication_delivery_method' => 'setCommunicationDeliveryMethod',
        'communication_message_type' => 'setCommunicationMessageType',
        'counter' => 'setCounter',
        'equipment_type' => 'setEquipmentType',
        'file_type' => 'setFileType',
        'incoterm' => 'setIncoterm',
        'log_type' => 'setLogType',
        'object_type' => 'setObjectType',
        'optimisation_objective' => 'setOptimisationObjective',
        'party_type' => 'setPartyType',
        'phone_nr_type' => 'setPhoneNrType',
        'recurrence_period' => 'setRecurrencePeriod',
        'recurrence_type' => 'setRecurrenceType',
        'role' => 'setRole',
        'saywhen_status' => 'setSaywhenStatus',
        'settings' => 'setSettings',
        'settings_group' => 'setSettingsGroup',
        'status_type' => 'setStatusType',
        'route_status' => 'setRouteStatus',
        'activity_status' => 'setActivityStatus',
        'shipment_status' => 'setShipmentStatus',
        'package_line_status' => 'setPackageLineStatus',
        'assignment_status' => 'setAssignmentStatus',
        'message_status' => 'setMessageStatus',
        'user_status' => 'setUserStatus',
        'job_status' => 'setJobStatus',
        'api_request_status' => 'setApiRequestStatus',
        'system_provider' => 'setSystemProvider',
        'provider' => 'setProvider',
        'time_slot_type' => 'setTimeSlotType',
        'transaction_type' => 'setTransactionType',
        'uom' => 'setUom',
        'uom_group' => 'setUomGroup',
        'vehicle_type' => 'setVehicleType',
        'package_type' => 'setPackageType'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'irregularity_category' => 'getIrregularityCategory',
        'irregularity_cause' => 'getIrregularityCause',
        'instruction_type' => 'getInstructionType',
        'reference_type' => 'getReferenceType',
        'relation_type' => 'getRelationType',
        'week_day' => 'getWeekDay',
        'action_type' => 'getActionType',
        'activity_type' => 'getActivityType',
        'special_activity' => 'getSpecialActivity',
        'ae_activity' => 'getAeActivity',
        'address_type' => 'getAddressType',
        'ae_address_type' => 'getAeAddressType',
        'communication_delivery_method' => 'getCommunicationDeliveryMethod',
        'communication_message_type' => 'getCommunicationMessageType',
        'counter' => 'getCounter',
        'equipment_type' => 'getEquipmentType',
        'file_type' => 'getFileType',
        'incoterm' => 'getIncoterm',
        'log_type' => 'getLogType',
        'object_type' => 'getObjectType',
        'optimisation_objective' => 'getOptimisationObjective',
        'party_type' => 'getPartyType',
        'phone_nr_type' => 'getPhoneNrType',
        'recurrence_period' => 'getRecurrencePeriod',
        'recurrence_type' => 'getRecurrenceType',
        'role' => 'getRole',
        'saywhen_status' => 'getSaywhenStatus',
        'settings' => 'getSettings',
        'settings_group' => 'getSettingsGroup',
        'status_type' => 'getStatusType',
        'route_status' => 'getRouteStatus',
        'activity_status' => 'getActivityStatus',
        'shipment_status' => 'getShipmentStatus',
        'package_line_status' => 'getPackageLineStatus',
        'assignment_status' => 'getAssignmentStatus',
        'message_status' => 'getMessageStatus',
        'user_status' => 'getUserStatus',
        'job_status' => 'getJobStatus',
        'api_request_status' => 'getApiRequestStatus',
        'system_provider' => 'getSystemProvider',
        'provider' => 'getProvider',
        'time_slot_type' => 'getTimeSlotType',
        'transaction_type' => 'getTransactionType',
        'uom' => 'getUom',
        'uom_group' => 'getUomGroup',
        'vehicle_type' => 'getVehicleType',
        'package_type' => 'getPackageType'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['irregularity_category'] = isset($data['irregularity_category']) ? $data['irregularity_category'] : null;
        $this->container['irregularity_cause'] = isset($data['irregularity_cause']) ? $data['irregularity_cause'] : null;
        $this->container['instruction_type'] = isset($data['instruction_type']) ? $data['instruction_type'] : null;
        $this->container['reference_type'] = isset($data['reference_type']) ? $data['reference_type'] : null;
        $this->container['relation_type'] = isset($data['relation_type']) ? $data['relation_type'] : null;
        $this->container['week_day'] = isset($data['week_day']) ? $data['week_day'] : null;
        $this->container['action_type'] = isset($data['action_type']) ? $data['action_type'] : null;
        $this->container['activity_type'] = isset($data['activity_type']) ? $data['activity_type'] : null;
        $this->container['special_activity'] = isset($data['special_activity']) ? $data['special_activity'] : null;
        $this->container['ae_activity'] = isset($data['ae_activity']) ? $data['ae_activity'] : null;
        $this->container['address_type'] = isset($data['address_type']) ? $data['address_type'] : null;
        $this->container['ae_address_type'] = isset($data['ae_address_type']) ? $data['ae_address_type'] : null;
        $this->container['communication_delivery_method'] = isset($data['communication_delivery_method']) ? $data['communication_delivery_method'] : null;
        $this->container['communication_message_type'] = isset($data['communication_message_type']) ? $data['communication_message_type'] : null;
        $this->container['counter'] = isset($data['counter']) ? $data['counter'] : null;
        $this->container['equipment_type'] = isset($data['equipment_type']) ? $data['equipment_type'] : null;
        $this->container['file_type'] = isset($data['file_type']) ? $data['file_type'] : null;
        $this->container['incoterm'] = isset($data['incoterm']) ? $data['incoterm'] : null;
        $this->container['log_type'] = isset($data['log_type']) ? $data['log_type'] : null;
        $this->container['object_type'] = isset($data['object_type']) ? $data['object_type'] : null;
        $this->container['optimisation_objective'] = isset($data['optimisation_objective']) ? $data['optimisation_objective'] : null;
        $this->container['party_type'] = isset($data['party_type']) ? $data['party_type'] : null;
        $this->container['phone_nr_type'] = isset($data['phone_nr_type']) ? $data['phone_nr_type'] : null;
        $this->container['recurrence_period'] = isset($data['recurrence_period']) ? $data['recurrence_period'] : null;
        $this->container['recurrence_type'] = isset($data['recurrence_type']) ? $data['recurrence_type'] : null;
        $this->container['role'] = isset($data['role']) ? $data['role'] : null;
        $this->container['saywhen_status'] = isset($data['saywhen_status']) ? $data['saywhen_status'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['settings_group'] = isset($data['settings_group']) ? $data['settings_group'] : null;
        $this->container['status_type'] = isset($data['status_type']) ? $data['status_type'] : null;
        $this->container['route_status'] = isset($data['route_status']) ? $data['route_status'] : null;
        $this->container['activity_status'] = isset($data['activity_status']) ? $data['activity_status'] : null;
        $this->container['shipment_status'] = isset($data['shipment_status']) ? $data['shipment_status'] : null;
        $this->container['package_line_status'] = isset($data['package_line_status']) ? $data['package_line_status'] : null;
        $this->container['assignment_status'] = isset($data['assignment_status']) ? $data['assignment_status'] : null;
        $this->container['message_status'] = isset($data['message_status']) ? $data['message_status'] : null;
        $this->container['user_status'] = isset($data['user_status']) ? $data['user_status'] : null;
        $this->container['job_status'] = isset($data['job_status']) ? $data['job_status'] : null;
        $this->container['api_request_status'] = isset($data['api_request_status']) ? $data['api_request_status'] : null;
        $this->container['system_provider'] = isset($data['system_provider']) ? $data['system_provider'] : null;
        $this->container['provider'] = isset($data['provider']) ? $data['provider'] : null;
        $this->container['time_slot_type'] = isset($data['time_slot_type']) ? $data['time_slot_type'] : null;
        $this->container['transaction_type'] = isset($data['transaction_type']) ? $data['transaction_type'] : null;
        $this->container['uom'] = isset($data['uom']) ? $data['uom'] : null;
        $this->container['uom_group'] = isset($data['uom_group']) ? $data['uom_group'] : null;
        $this->container['vehicle_type'] = isset($data['vehicle_type']) ? $data['vehicle_type'] : null;
        $this->container['package_type'] = isset($data['package_type']) ? $data['package_type'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets irregularity_category
     * @return map[string,string]
     */
    public function getIrregularityCategory()
    {
        return $this->container['irregularity_category'];
    }

    /**
     * Sets irregularity_category
     * @param map[string,string] $irregularity_category Irregularity Categories
     * @return $this
     */
    public function setIrregularityCategory($irregularity_category)
    {
        $this->container['irregularity_category'] = $irregularity_category;

        return $this;
    }

    /**
     * Gets irregularity_cause
     * @return map[string,string]
     */
    public function getIrregularityCause()
    {
        return $this->container['irregularity_cause'];
    }

    /**
     * Sets irregularity_cause
     * @param map[string,string] $irregularity_cause Irregularity Causes
     * @return $this
     */
    public function setIrregularityCause($irregularity_cause)
    {
        $this->container['irregularity_cause'] = $irregularity_cause;

        return $this;
    }

    /**
     * Gets instruction_type
     * @return map[string,string]
     */
    public function getInstructionType()
    {
        return $this->container['instruction_type'];
    }

    /**
     * Sets instruction_type
     * @param map[string,string] $instruction_type Instruction Types
     * @return $this
     */
    public function setInstructionType($instruction_type)
    {
        $this->container['instruction_type'] = $instruction_type;

        return $this;
    }

    /**
     * Gets reference_type
     * @return map[string,string]
     */
    public function getReferenceType()
    {
        return $this->container['reference_type'];
    }

    /**
     * Sets reference_type
     * @param map[string,string] $reference_type Reference Types
     * @return $this
     */
    public function setReferenceType($reference_type)
    {
        $this->container['reference_type'] = $reference_type;

        return $this;
    }

    /**
     * Gets relation_type
     * @return map[string,string]
     */
    public function getRelationType()
    {
        return $this->container['relation_type'];
    }

    /**
     * Sets relation_type
     * @param map[string,string] $relation_type Relation Types
     * @return $this
     */
    public function setRelationType($relation_type)
    {
        $this->container['relation_type'] = $relation_type;

        return $this;
    }

    /**
     * Gets week_day
     * @return map[string,string]
     */
    public function getWeekDay()
    {
        return $this->container['week_day'];
    }

    /**
     * Sets week_day
     * @param map[string,string] $week_day Names of the days in the week
     * @return $this
     */
    public function setWeekDay($week_day)
    {
        $this->container['week_day'] = $week_day;

        return $this;
    }

    /**
     * Gets action_type
     * @return map[string,string]
     */
    public function getActionType()
    {
        return $this->container['action_type'];
    }

    /**
     * Sets action_type
     * @param map[string,string] $action_type Action Types
     * @return $this
     */
    public function setActionType($action_type)
    {
        $this->container['action_type'] = $action_type;

        return $this;
    }

    /**
     * Gets activity_type
     * @return map[string,string]
     */
    public function getActivityType()
    {
        return $this->container['activity_type'];
    }

    /**
     * Sets activity_type
     * @param map[string,string] $activity_type Activity Types
     * @return $this
     */
    public function setActivityType($activity_type)
    {
        $this->container['activity_type'] = $activity_type;

        return $this;
    }

    /**
     * Gets special_activity
     * @return map[string,string]
     */
    public function getSpecialActivity()
    {
        return $this->container['special_activity'];
    }

    /**
     * Sets special_activity
     * @param map[string,string] $special_activity Special Activities
     * @return $this
     */
    public function setSpecialActivity($special_activity)
    {
        $this->container['special_activity'] = $special_activity;

        return $this;
    }

    /**
     * Gets ae_activity
     * @return map[string,string]
     */
    public function getAeActivity()
    {
        return $this->container['ae_activity'];
    }

    /**
     * Sets ae_activity
     * @param map[string,string] $ae_activity EA Activity
     * @return $this
     */
    public function setAeActivity($ae_activity)
    {
        $this->container['ae_activity'] = $ae_activity;

        return $this;
    }

    /**
     * Gets address_type
     * @return map[string,string]
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     * @param map[string,string] $address_type Address Types
     * @return $this
     */
    public function setAddressType($address_type)
    {
        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets ae_address_type
     * @return map[string,string]
     */
    public function getAeAddressType()
    {
        return $this->container['ae_address_type'];
    }

    /**
     * Sets ae_address_type
     * @param map[string,string] $ae_address_type EA Address Types
     * @return $this
     */
    public function setAeAddressType($ae_address_type)
    {
        $this->container['ae_address_type'] = $ae_address_type;

        return $this;
    }

    /**
     * Gets communication_delivery_method
     * @return map[string,string]
     */
    public function getCommunicationDeliveryMethod()
    {
        return $this->container['communication_delivery_method'];
    }

    /**
     * Sets communication_delivery_method
     * @param map[string,string] $communication_delivery_method Communication Delivery Methods
     * @return $this
     */
    public function setCommunicationDeliveryMethod($communication_delivery_method)
    {
        $this->container['communication_delivery_method'] = $communication_delivery_method;

        return $this;
    }

    /**
     * Gets communication_message_type
     * @return map[string,string]
     */
    public function getCommunicationMessageType()
    {
        return $this->container['communication_message_type'];
    }

    /**
     * Sets communication_message_type
     * @param map[string,string] $communication_message_type Communication Message Types
     * @return $this
     */
    public function setCommunicationMessageType($communication_message_type)
    {
        $this->container['communication_message_type'] = $communication_message_type;

        return $this;
    }

    /**
     * Gets counter
     * @return map[string,string]
     */
    public function getCounter()
    {
        return $this->container['counter'];
    }

    /**
     * Sets counter
     * @param map[string,string] $counter Counters
     * @return $this
     */
    public function setCounter($counter)
    {
        $this->container['counter'] = $counter;

        return $this;
    }

    /**
     * Gets equipment_type
     * @return map[string,string]
     */
    public function getEquipmentType()
    {
        return $this->container['equipment_type'];
    }

    /**
     * Sets equipment_type
     * @param map[string,string] $equipment_type Equipment Types
     * @return $this
     */
    public function setEquipmentType($equipment_type)
    {
        $this->container['equipment_type'] = $equipment_type;

        return $this;
    }

    /**
     * Gets file_type
     * @return map[string,string]
     */
    public function getFileType()
    {
        return $this->container['file_type'];
    }

    /**
     * Sets file_type
     * @param map[string,string] $file_type File Types
     * @return $this
     */
    public function setFileType($file_type)
    {
        $this->container['file_type'] = $file_type;

        return $this;
    }

    /**
     * Gets incoterm
     * @return map[string,string]
     */
    public function getIncoterm()
    {
        return $this->container['incoterm'];
    }

    /**
     * Sets incoterm
     * @param map[string,string] $incoterm Incoterms
     * @return $this
     */
    public function setIncoterm($incoterm)
    {
        $this->container['incoterm'] = $incoterm;

        return $this;
    }

    /**
     * Gets log_type
     * @return map[string,string]
     */
    public function getLogType()
    {
        return $this->container['log_type'];
    }

    /**
     * Sets log_type
     * @param map[string,string] $log_type Log Types
     * @return $this
     */
    public function setLogType($log_type)
    {
        $this->container['log_type'] = $log_type;

        return $this;
    }

    /**
     * Gets object_type
     * @return map[string,string]
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     * @param map[string,string] $object_type Object Types
     * @return $this
     */
    public function setObjectType($object_type)
    {
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets optimisation_objective
     * @return map[string,string]
     */
    public function getOptimisationObjective()
    {
        return $this->container['optimisation_objective'];
    }

    /**
     * Sets optimisation_objective
     * @param map[string,string] $optimisation_objective Optimisation Objectives
     * @return $this
     */
    public function setOptimisationObjective($optimisation_objective)
    {
        $this->container['optimisation_objective'] = $optimisation_objective;

        return $this;
    }

    /**
     * Gets party_type
     * @return map[string,string]
     */
    public function getPartyType()
    {
        return $this->container['party_type'];
    }

    /**
     * Sets party_type
     * @param map[string,string] $party_type Party Types
     * @return $this
     */
    public function setPartyType($party_type)
    {
        $this->container['party_type'] = $party_type;

        return $this;
    }

    /**
     * Gets phone_nr_type
     * @return map[string,string]
     */
    public function getPhoneNrType()
    {
        return $this->container['phone_nr_type'];
    }

    /**
     * Sets phone_nr_type
     * @param map[string,string] $phone_nr_type Phone NR Types
     * @return $this
     */
    public function setPhoneNrType($phone_nr_type)
    {
        $this->container['phone_nr_type'] = $phone_nr_type;

        return $this;
    }

    /**
     * Gets recurrence_period
     * @return map[string,string]
     */
    public function getRecurrencePeriod()
    {
        return $this->container['recurrence_period'];
    }

    /**
     * Sets recurrence_period
     * @param map[string,string] $recurrence_period Recurrence Periods
     * @return $this
     */
    public function setRecurrencePeriod($recurrence_period)
    {
        $this->container['recurrence_period'] = $recurrence_period;

        return $this;
    }

    /**
     * Gets recurrence_type
     * @return map[string,string]
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrence_type'];
    }

    /**
     * Sets recurrence_type
     * @param map[string,string] $recurrence_type Recurrence Types
     * @return $this
     */
    public function setRecurrenceType($recurrence_type)
    {
        $this->container['recurrence_type'] = $recurrence_type;

        return $this;
    }

    /**
     * Gets role
     * @return map[string,string]
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     * @param map[string,string] $role Roles
     * @return $this
     */
    public function setRole($role)
    {
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets saywhen_status
     * @return map[string,string]
     */
    public function getSaywhenStatus()
    {
        return $this->container['saywhen_status'];
    }

    /**
     * Sets saywhen_status
     * @param map[string,string] $saywhen_status SayWhen Statuses
     * @return $this
     */
    public function setSaywhenStatus($saywhen_status)
    {
        $this->container['saywhen_status'] = $saywhen_status;

        return $this;
    }

    /**
     * Gets settings
     * @return map[string,string]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     * @param map[string,string] $settings Settings
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets settings_group
     * @return map[string,string]
     */
    public function getSettingsGroup()
    {
        return $this->container['settings_group'];
    }

    /**
     * Sets settings_group
     * @param map[string,string] $settings_group Settings Groups
     * @return $this
     */
    public function setSettingsGroup($settings_group)
    {
        $this->container['settings_group'] = $settings_group;

        return $this;
    }

    /**
     * Gets status_type
     * @return map[string,string]
     */
    public function getStatusType()
    {
        return $this->container['status_type'];
    }

    /**
     * Sets status_type
     * @param map[string,string] $status_type Status Types
     * @return $this
     */
    public function setStatusType($status_type)
    {
        $this->container['status_type'] = $status_type;

        return $this;
    }

    /**
     * Gets route_status
     * @return map[string,string]
     */
    public function getRouteStatus()
    {
        return $this->container['route_status'];
    }

    /**
     * Sets route_status
     * @param map[string,string] $route_status Route Statuses
     * @return $this
     */
    public function setRouteStatus($route_status)
    {
        $this->container['route_status'] = $route_status;

        return $this;
    }

    /**
     * Gets activity_status
     * @return map[string,string]
     */
    public function getActivityStatus()
    {
        return $this->container['activity_status'];
    }

    /**
     * Sets activity_status
     * @param map[string,string] $activity_status Activity Statuses
     * @return $this
     */
    public function setActivityStatus($activity_status)
    {
        $this->container['activity_status'] = $activity_status;

        return $this;
    }

    /**
     * Gets shipment_status
     * @return map[string,string]
     */
    public function getShipmentStatus()
    {
        return $this->container['shipment_status'];
    }

    /**
     * Sets shipment_status
     * @param map[string,string] $shipment_status Shipment Statuses
     * @return $this
     */
    public function setShipmentStatus($shipment_status)
    {
        $this->container['shipment_status'] = $shipment_status;

        return $this;
    }

    /**
     * Gets package_line_status
     * @return map[string,string]
     */
    public function getPackageLineStatus()
    {
        return $this->container['package_line_status'];
    }

    /**
     * Sets package_line_status
     * @param map[string,string] $package_line_status Package Line Statuses
     * @return $this
     */
    public function setPackageLineStatus($package_line_status)
    {
        $this->container['package_line_status'] = $package_line_status;

        return $this;
    }

    /**
     * Gets assignment_status
     * @return map[string,string]
     */
    public function getAssignmentStatus()
    {
        return $this->container['assignment_status'];
    }

    /**
     * Sets assignment_status
     * @param map[string,string] $assignment_status Assignment Statuses
     * @return $this
     */
    public function setAssignmentStatus($assignment_status)
    {
        $this->container['assignment_status'] = $assignment_status;

        return $this;
    }

    /**
     * Gets message_status
     * @return map[string,string]
     */
    public function getMessageStatus()
    {
        return $this->container['message_status'];
    }

    /**
     * Sets message_status
     * @param map[string,string] $message_status Message Statuses
     * @return $this
     */
    public function setMessageStatus($message_status)
    {
        $this->container['message_status'] = $message_status;

        return $this;
    }

    /**
     * Gets user_status
     * @return map[string,string]
     */
    public function getUserStatus()
    {
        return $this->container['user_status'];
    }

    /**
     * Sets user_status
     * @param map[string,string] $user_status User Statuses
     * @return $this
     */
    public function setUserStatus($user_status)
    {
        $this->container['user_status'] = $user_status;

        return $this;
    }

    /**
     * Gets job_status
     * @return map[string,string]
     */
    public function getJobStatus()
    {
        return $this->container['job_status'];
    }

    /**
     * Sets job_status
     * @param map[string,string] $job_status Job Statuses
     * @return $this
     */
    public function setJobStatus($job_status)
    {
        $this->container['job_status'] = $job_status;

        return $this;
    }

    /**
     * Gets api_request_status
     * @return map[string,string]
     */
    public function getApiRequestStatus()
    {
        return $this->container['api_request_status'];
    }

    /**
     * Sets api_request_status
     * @param map[string,string] $api_request_status API Request Statuses
     * @return $this
     */
    public function setApiRequestStatus($api_request_status)
    {
        $this->container['api_request_status'] = $api_request_status;

        return $this;
    }

    /**
     * Gets system_provider
     * @return map[string,string]
     */
    public function getSystemProvider()
    {
        return $this->container['system_provider'];
    }

    /**
     * Sets system_provider
     * @param map[string,string] $system_provider System Providers
     * @return $this
     */
    public function setSystemProvider($system_provider)
    {
        $this->container['system_provider'] = $system_provider;

        return $this;
    }

    /**
     * Gets provider
     * @return map[string,string]
     */
    public function getProvider()
    {
        return $this->container['provider'];
    }

    /**
     * Sets provider
     * @param map[string,string] $provider Providers
     * @return $this
     */
    public function setProvider($provider)
    {
        $this->container['provider'] = $provider;

        return $this;
    }

    /**
     * Gets time_slot_type
     * @return map[string,string]
     */
    public function getTimeSlotType()
    {
        return $this->container['time_slot_type'];
    }

    /**
     * Sets time_slot_type
     * @param map[string,string] $time_slot_type Time Slot Types
     * @return $this
     */
    public function setTimeSlotType($time_slot_type)
    {
        $this->container['time_slot_type'] = $time_slot_type;

        return $this;
    }

    /**
     * Gets transaction_type
     * @return map[string,string]
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     * @param map[string,string] $transaction_type Transaction Types
     * @return $this
     */
    public function setTransactionType($transaction_type)
    {
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets uom
     * @return map[string,string]
     */
    public function getUom()
    {
        return $this->container['uom'];
    }

    /**
     * Sets uom
     * @param map[string,string] $uom UOM
     * @return $this
     */
    public function setUom($uom)
    {
        $this->container['uom'] = $uom;

        return $this;
    }

    /**
     * Gets uom_group
     * @return map[string,string]
     */
    public function getUomGroup()
    {
        return $this->container['uom_group'];
    }

    /**
     * Sets uom_group
     * @param map[string,string] $uom_group UOM Groups
     * @return $this
     */
    public function setUomGroup($uom_group)
    {
        $this->container['uom_group'] = $uom_group;

        return $this;
    }

    /**
     * Gets vehicle_type
     * @return map[string,string]
     */
    public function getVehicleType()
    {
        return $this->container['vehicle_type'];
    }

    /**
     * Sets vehicle_type
     * @param map[string,string] $vehicle_type Vehicle Types
     * @return $this
     */
    public function setVehicleType($vehicle_type)
    {
        $this->container['vehicle_type'] = $vehicle_type;

        return $this;
    }

    /**
     * Gets package_type
     * @return map[string,string]
     */
    public function getPackageType()
    {
        return $this->container['package_type'];
    }

    /**
     * Sets package_type
     * @param map[string,string] $package_type Package Types
     * @return $this
     */
    public function setPackageType($package_type)
    {
        $this->container['package_type'] = $package_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


