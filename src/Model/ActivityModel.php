<?php
/**
 * ActivityModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * ActivityModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ActivityModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'ActivityModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'uuid' => 'string',
        'bundle_activity_id' => 'int',
        'shipment_activity_id' => 'int',
        'shipment_activity_nr' => 'string',
        'bundle_shipment_activity_nr' => 'string',
        'nr' => 'string',
        'activity_type_name' => 'string',
        'activity_type_id' => 'int',
        'status_id' => 'int',
        'status_name' => 'string',
        'assignment_id' => 'int',
        'assignment_nr' => 'string',
        'assignment' => '\BumbalClient\Model\AssignmentModel',
        'assignment_sequence_nr' => 'int',
        'remarks' => 'string',
        'locked' => 'int',
        'optimized' => 'bool',
        'priority' => 'int',
        'top_priority' => 'bool',
        'sequence_nr' => 'int',
        'planned_driving_time' => 'int',
        'planned_driving_duration' => 'int',
        'planned_driving_distance' => 'int',
        'reference' => 'string',
        'description' => 'string',
        'earliest_delivery_date_time' => '\DateTime',
        'latest_delivery_date_time' => '\DateTime',
        'earliest_delivery_date' => '\DateTime',
        'latest_delivery_date' => '\DateTime',
        'date_time_from' => '\DateTime',
        'date_time_to' => '\DateTime',
        'planned_date_time_from' => '\DateTime',
        'planned_date_time_to' => '\DateTime',
        'executed_date_time_from' => '\DateTime',
        'executed_date_time_to' => '\DateTime',
        'duration' => 'int',
        'depot_duration' => 'int',
        'active' => 'bool',
        'route_id' => 'string',
        'route_nr' => 'string',
        'route_name' => 'string',
        'route_date_time_from' => '\DateTime',
        'route_date_time_to' => '\DateTime',
        'route_earliest_date_time' => '\DateTime',
        'route_latest_date_time' => '\DateTime',
        'route_status_id' => 'int',
        'route_status_name' => 'string',
        'route_nr_of_stops' => 'int',
        'route_overdue' => 'bool',
        'co_driver_ids' => 'int[]',
        'co_drivers' => '\BumbalClient\Model\UsersModel[]',
        'user_id' => 'int',
        'driver_id' => 'int',
        'driver_first_name' => 'string',
        'driver_last_name' => 'string',
        'driver_name_prefix' => 'string',
        'driver_full_name' => 'string',
        'addressapplied_id' => 'int',
        'address_id' => 'int',
        'address' => '\BumbalClient\Model\AddressModel',
        'address_applied' => '\BumbalClient\Model\AddressAppliedModel',
        'depot_address' => '\BumbalClient\Model\AddressModel',
        'depot_address_id' => 'int',
        'depot_activity' => '\BumbalClient\Model\ActivityModel[]',
        'allowed_driver_ids' => 'int[]',
        'allowed_drivers' => '\BumbalClient\Model\AllowedDriverModel[]',
        'allowed_drivers_links' => '\BumbalClient\Model\LinkModel[]',
        'applied_capacities' => 'object',
        'capacities' => '\BumbalClient\Model\CapacityModel[]',
        'package_lines' => '\BumbalClient\Model\PackageLineModel[]',
        'payments' => '\BumbalClient\Model\PaymentModel[]',
        'time_slots' => '\BumbalClient\Model\TimeSlotModel[]',
        'brand_id' => 'int',
        'brand_name' => 'string',
        'brand' => '\BumbalClient\Model\BrandModel',
        'communication' => '\BumbalClient\Model\CommunicationModel',
        'assignment_link' => '\BumbalClient\Model\LinkModel',
        'route_link' => '\BumbalClient\Model\LinkModel',
        'route' => '\BumbalClient\Model\RouteModel',
        'driver' => '\BumbalClient\Model\DriverModel',
        'driver_links' => '\BumbalClient\Model\LinkModel[]',
        'car' => '\BumbalClient\Model\VehicleModel',
        'vehicle' => '\BumbalClient\Model\VehicleModel',
        'trailer' => '\BumbalClient\Model\TrailerModel',
        'activity_id_before' => 'string',
        'activity_id_after' => 'string',
        'bundled_activity_ids' => 'int[]',
        'tags' => '\BumbalClient\Model\TagModel[]',
        'recurrence' => '\BumbalClient\Model\RecurrenceModel',
        'tag_names' => 'string[]',
        'tag_ids' => 'int[]',
        'zones' => '\BumbalClient\Model\ZoneModel[]',
        'zone_names' => 'string[]',
        'links' => '\BumbalClient\Model\LinkModel[]',
        'meta_data' => '\BumbalClient\Model\MetaDataModel[]',
        'stats' => '\BumbalClient\Model\ActivityStatsModel',
        'notes' => '\BumbalClient\Model\NoteModel[]',
        'files' => '\BumbalClient\Model\FileModel[]',
        'activity_created_at' => '\DateTime',
        'activity_updated_at' => '\DateTime',
        'activity_created_by' => 'int',
        'activity_updated_by' => 'int',
        'activity_created_by_user' => '\BumbalClient\Model\UsersModel',
        'activity_updated_by_user' => '\BumbalClient\Model\UsersModel',
        'activity_active' => 'bool',
        'activity_removed' => 'bool',
        'payment_total' => 'int',
        'transaction_total' => 'int',
        'due_total' => 'int',
        'transactions' => '\BumbalClient\Model\TransactionModel[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'uuid' => null,
        'bundle_activity_id' => 'int64',
        'shipment_activity_id' => 'int64',
        'shipment_activity_nr' => null,
        'bundle_shipment_activity_nr' => null,
        'nr' => null,
        'activity_type_name' => null,
        'activity_type_id' => 'int64',
        'status_id' => null,
        'status_name' => null,
        'assignment_id' => null,
        'assignment_nr' => null,
        'assignment' => null,
        'assignment_sequence_nr' => 'int64',
        'remarks' => null,
        'locked' => null,
        'optimized' => null,
        'priority' => null,
        'top_priority' => null,
        'sequence_nr' => 'int64',
        'planned_driving_time' => 'int64',
        'planned_driving_duration' => 'int64',
        'planned_driving_distance' => 'int64',
        'reference' => null,
        'description' => null,
        'earliest_delivery_date_time' => 'date',
        'latest_delivery_date_time' => 'date',
        'earliest_delivery_date' => 'date',
        'latest_delivery_date' => 'date',
        'date_time_from' => 'date-time',
        'date_time_to' => 'date-time',
        'planned_date_time_from' => 'date-time',
        'planned_date_time_to' => 'date-time',
        'executed_date_time_from' => 'date-time',
        'executed_date_time_to' => 'date-time',
        'duration' => null,
        'depot_duration' => null,
        'active' => null,
        'route_id' => null,
        'route_nr' => null,
        'route_name' => null,
        'route_date_time_from' => 'date-time',
        'route_date_time_to' => 'date-time',
        'route_earliest_date_time' => 'date-time',
        'route_latest_date_time' => 'date-time',
        'route_status_id' => null,
        'route_status_name' => null,
        'route_nr_of_stops' => null,
        'route_overdue' => null,
        'co_driver_ids' => null,
        'co_drivers' => null,
        'user_id' => null,
        'driver_id' => null,
        'driver_first_name' => null,
        'driver_last_name' => null,
        'driver_name_prefix' => null,
        'driver_full_name' => null,
        'addressapplied_id' => null,
        'address_id' => null,
        'address' => null,
        'address_applied' => null,
        'depot_address' => null,
        'depot_address_id' => null,
        'depot_activity' => null,
        'allowed_driver_ids' => null,
        'allowed_drivers' => null,
        'allowed_drivers_links' => null,
        'applied_capacities' => null,
        'capacities' => null,
        'package_lines' => null,
        'payments' => null,
        'time_slots' => null,
        'brand_id' => null,
        'brand_name' => null,
        'brand' => null,
        'communication' => null,
        'assignment_link' => null,
        'route_link' => null,
        'route' => null,
        'driver' => null,
        'driver_links' => null,
        'car' => null,
        'vehicle' => null,
        'trailer' => null,
        'activity_id_before' => null,
        'activity_id_after' => null,
        'bundled_activity_ids' => null,
        'tags' => null,
        'recurrence' => null,
        'tag_names' => null,
        'tag_ids' => null,
        'zones' => null,
        'zone_names' => null,
        'links' => null,
        'meta_data' => null,
        'stats' => null,
        'notes' => null,
        'files' => null,
        'activity_created_at' => 'date-time',
        'activity_updated_at' => 'date-time',
        'activity_created_by' => null,
        'activity_updated_by' => null,
        'activity_created_by_user' => null,
        'activity_updated_by_user' => null,
        'activity_active' => null,
        'activity_removed' => null,
        'payment_total' => null,
        'transaction_total' => null,
        'due_total' => null,
        'transactions' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'uuid' => 'uuid',
        'bundle_activity_id' => 'bundle_activity_id',
        'shipment_activity_id' => 'shipment_activity_id',
        'shipment_activity_nr' => 'shipment_activity_nr',
        'bundle_shipment_activity_nr' => 'bundle_shipment_activity_nr',
        'nr' => 'nr',
        'activity_type_name' => 'activity_type_name',
        'activity_type_id' => 'activity_type_id',
        'status_id' => 'status_id',
        'status_name' => 'status_name',
        'assignment_id' => 'assignment_id',
        'assignment_nr' => 'assignment_nr',
        'assignment' => 'assignment',
        'assignment_sequence_nr' => 'assignment_sequence_nr',
        'remarks' => 'remarks',
        'locked' => 'locked',
        'optimized' => 'optimized',
        'priority' => 'priority',
        'top_priority' => 'top_priority',
        'sequence_nr' => 'sequence_nr',
        'planned_driving_time' => 'planned_driving_time',
        'planned_driving_duration' => 'planned_driving_duration',
        'planned_driving_distance' => 'planned_driving_distance',
        'reference' => 'reference',
        'description' => 'description',
        'earliest_delivery_date_time' => 'earliest_delivery_date_time',
        'latest_delivery_date_time' => 'latest_delivery_date_time',
        'earliest_delivery_date' => 'earliest_delivery_date',
        'latest_delivery_date' => 'latest_delivery_date',
        'date_time_from' => 'date_time_from',
        'date_time_to' => 'date_time_to',
        'planned_date_time_from' => 'planned_date_time_from',
        'planned_date_time_to' => 'planned_date_time_to',
        'executed_date_time_from' => 'executed_date_time_from',
        'executed_date_time_to' => 'executed_date_time_to',
        'duration' => 'duration',
        'depot_duration' => 'depot_duration',
        'active' => 'active',
        'route_id' => 'route_id',
        'route_nr' => 'route_nr',
        'route_name' => 'route_name',
        'route_date_time_from' => 'route_date_time_from',
        'route_date_time_to' => 'route_date_time_to',
        'route_earliest_date_time' => 'route_earliest_date_time',
        'route_latest_date_time' => 'route_latest_date_time',
        'route_status_id' => 'route_status_id',
        'route_status_name' => 'route_status_name',
        'route_nr_of_stops' => 'route_nr_of_stops',
        'route_overdue' => 'route_overdue',
        'co_driver_ids' => 'co_driver_ids',
        'co_drivers' => 'co_drivers',
        'user_id' => 'user_id',
        'driver_id' => 'driver_id',
        'driver_first_name' => 'driver_first_name',
        'driver_last_name' => 'driver_last_name',
        'driver_name_prefix' => 'driver_name_prefix',
        'driver_full_name' => 'driver_full_name',
        'addressapplied_id' => 'addressapplied_id',
        'address_id' => 'address_id',
        'address' => 'address',
        'address_applied' => 'address_applied',
        'depot_address' => 'depot_address',
        'depot_address_id' => 'depot_address_id',
        'depot_activity' => 'depot_activity',
        'allowed_driver_ids' => 'allowed_driver_ids',
        'allowed_drivers' => 'allowed_drivers',
        'allowed_drivers_links' => 'allowed_drivers_links',
        'applied_capacities' => 'applied_capacities',
        'capacities' => 'capacities',
        'package_lines' => 'package_lines',
        'payments' => 'payments',
        'time_slots' => 'time_slots',
        'brand_id' => 'brand_id',
        'brand_name' => 'brand_name',
        'brand' => 'brand',
        'communication' => 'communication',
        'assignment_link' => 'assignment_link',
        'route_link' => 'route_link',
        'route' => 'route',
        'driver' => 'driver',
        'driver_links' => 'driver_links',
        'car' => 'car',
        'vehicle' => 'vehicle',
        'trailer' => 'trailer',
        'activity_id_before' => 'activity_id_before',
        'activity_id_after' => 'activity_id_after',
        'bundled_activity_ids' => 'bundled_activity_ids',
        'tags' => 'tags',
        'recurrence' => 'recurrence',
        'tag_names' => 'tag_names',
        'tag_ids' => 'tag_ids',
        'zones' => 'zones',
        'zone_names' => 'zone_names',
        'links' => 'links',
        'meta_data' => 'meta_data',
        'stats' => 'stats',
        'notes' => 'notes',
        'files' => 'files',
        'activity_created_at' => 'activity_created_at',
        'activity_updated_at' => 'activity_updated_at',
        'activity_created_by' => 'activity_created_by',
        'activity_updated_by' => 'activity_updated_by',
        'activity_created_by_user' => 'activity_created_by_user',
        'activity_updated_by_user' => 'activity_updated_by_user',
        'activity_active' => 'activity_active',
        'activity_removed' => 'activity_removed',
        'payment_total' => 'payment_total',
        'transaction_total' => 'transaction_total',
        'due_total' => 'due_total',
        'transactions' => 'transactions'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'uuid' => 'setUuid',
        'bundle_activity_id' => 'setBundleActivityId',
        'shipment_activity_id' => 'setShipmentActivityId',
        'shipment_activity_nr' => 'setShipmentActivityNr',
        'bundle_shipment_activity_nr' => 'setBundleShipmentActivityNr',
        'nr' => 'setNr',
        'activity_type_name' => 'setActivityTypeName',
        'activity_type_id' => 'setActivityTypeId',
        'status_id' => 'setStatusId',
        'status_name' => 'setStatusName',
        'assignment_id' => 'setAssignmentId',
        'assignment_nr' => 'setAssignmentNr',
        'assignment' => 'setAssignment',
        'assignment_sequence_nr' => 'setAssignmentSequenceNr',
        'remarks' => 'setRemarks',
        'locked' => 'setLocked',
        'optimized' => 'setOptimized',
        'priority' => 'setPriority',
        'top_priority' => 'setTopPriority',
        'sequence_nr' => 'setSequenceNr',
        'planned_driving_time' => 'setPlannedDrivingTime',
        'planned_driving_duration' => 'setPlannedDrivingDuration',
        'planned_driving_distance' => 'setPlannedDrivingDistance',
        'reference' => 'setReference',
        'description' => 'setDescription',
        'earliest_delivery_date_time' => 'setEarliestDeliveryDateTime',
        'latest_delivery_date_time' => 'setLatestDeliveryDateTime',
        'earliest_delivery_date' => 'setEarliestDeliveryDate',
        'latest_delivery_date' => 'setLatestDeliveryDate',
        'date_time_from' => 'setDateTimeFrom',
        'date_time_to' => 'setDateTimeTo',
        'planned_date_time_from' => 'setPlannedDateTimeFrom',
        'planned_date_time_to' => 'setPlannedDateTimeTo',
        'executed_date_time_from' => 'setExecutedDateTimeFrom',
        'executed_date_time_to' => 'setExecutedDateTimeTo',
        'duration' => 'setDuration',
        'depot_duration' => 'setDepotDuration',
        'active' => 'setActive',
        'route_id' => 'setRouteId',
        'route_nr' => 'setRouteNr',
        'route_name' => 'setRouteName',
        'route_date_time_from' => 'setRouteDateTimeFrom',
        'route_date_time_to' => 'setRouteDateTimeTo',
        'route_earliest_date_time' => 'setRouteEarliestDateTime',
        'route_latest_date_time' => 'setRouteLatestDateTime',
        'route_status_id' => 'setRouteStatusId',
        'route_status_name' => 'setRouteStatusName',
        'route_nr_of_stops' => 'setRouteNrOfStops',
        'route_overdue' => 'setRouteOverdue',
        'co_driver_ids' => 'setCoDriverIds',
        'co_drivers' => 'setCoDrivers',
        'user_id' => 'setUserId',
        'driver_id' => 'setDriverId',
        'driver_first_name' => 'setDriverFirstName',
        'driver_last_name' => 'setDriverLastName',
        'driver_name_prefix' => 'setDriverNamePrefix',
        'driver_full_name' => 'setDriverFullName',
        'addressapplied_id' => 'setAddressappliedId',
        'address_id' => 'setAddressId',
        'address' => 'setAddress',
        'address_applied' => 'setAddressApplied',
        'depot_address' => 'setDepotAddress',
        'depot_address_id' => 'setDepotAddressId',
        'depot_activity' => 'setDepotActivity',
        'allowed_driver_ids' => 'setAllowedDriverIds',
        'allowed_drivers' => 'setAllowedDrivers',
        'allowed_drivers_links' => 'setAllowedDriversLinks',
        'applied_capacities' => 'setAppliedCapacities',
        'capacities' => 'setCapacities',
        'package_lines' => 'setPackageLines',
        'payments' => 'setPayments',
        'time_slots' => 'setTimeSlots',
        'brand_id' => 'setBrandId',
        'brand_name' => 'setBrandName',
        'brand' => 'setBrand',
        'communication' => 'setCommunication',
        'assignment_link' => 'setAssignmentLink',
        'route_link' => 'setRouteLink',
        'route' => 'setRoute',
        'driver' => 'setDriver',
        'driver_links' => 'setDriverLinks',
        'car' => 'setCar',
        'vehicle' => 'setVehicle',
        'trailer' => 'setTrailer',
        'activity_id_before' => 'setActivityIdBefore',
        'activity_id_after' => 'setActivityIdAfter',
        'bundled_activity_ids' => 'setBundledActivityIds',
        'tags' => 'setTags',
        'recurrence' => 'setRecurrence',
        'tag_names' => 'setTagNames',
        'tag_ids' => 'setTagIds',
        'zones' => 'setZones',
        'zone_names' => 'setZoneNames',
        'links' => 'setLinks',
        'meta_data' => 'setMetaData',
        'stats' => 'setStats',
        'notes' => 'setNotes',
        'files' => 'setFiles',
        'activity_created_at' => 'setActivityCreatedAt',
        'activity_updated_at' => 'setActivityUpdatedAt',
        'activity_created_by' => 'setActivityCreatedBy',
        'activity_updated_by' => 'setActivityUpdatedBy',
        'activity_created_by_user' => 'setActivityCreatedByUser',
        'activity_updated_by_user' => 'setActivityUpdatedByUser',
        'activity_active' => 'setActivityActive',
        'activity_removed' => 'setActivityRemoved',
        'payment_total' => 'setPaymentTotal',
        'transaction_total' => 'setTransactionTotal',
        'due_total' => 'setDueTotal',
        'transactions' => 'setTransactions'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'uuid' => 'getUuid',
        'bundle_activity_id' => 'getBundleActivityId',
        'shipment_activity_id' => 'getShipmentActivityId',
        'shipment_activity_nr' => 'getShipmentActivityNr',
        'bundle_shipment_activity_nr' => 'getBundleShipmentActivityNr',
        'nr' => 'getNr',
        'activity_type_name' => 'getActivityTypeName',
        'activity_type_id' => 'getActivityTypeId',
        'status_id' => 'getStatusId',
        'status_name' => 'getStatusName',
        'assignment_id' => 'getAssignmentId',
        'assignment_nr' => 'getAssignmentNr',
        'assignment' => 'getAssignment',
        'assignment_sequence_nr' => 'getAssignmentSequenceNr',
        'remarks' => 'getRemarks',
        'locked' => 'getLocked',
        'optimized' => 'getOptimized',
        'priority' => 'getPriority',
        'top_priority' => 'getTopPriority',
        'sequence_nr' => 'getSequenceNr',
        'planned_driving_time' => 'getPlannedDrivingTime',
        'planned_driving_duration' => 'getPlannedDrivingDuration',
        'planned_driving_distance' => 'getPlannedDrivingDistance',
        'reference' => 'getReference',
        'description' => 'getDescription',
        'earliest_delivery_date_time' => 'getEarliestDeliveryDateTime',
        'latest_delivery_date_time' => 'getLatestDeliveryDateTime',
        'earliest_delivery_date' => 'getEarliestDeliveryDate',
        'latest_delivery_date' => 'getLatestDeliveryDate',
        'date_time_from' => 'getDateTimeFrom',
        'date_time_to' => 'getDateTimeTo',
        'planned_date_time_from' => 'getPlannedDateTimeFrom',
        'planned_date_time_to' => 'getPlannedDateTimeTo',
        'executed_date_time_from' => 'getExecutedDateTimeFrom',
        'executed_date_time_to' => 'getExecutedDateTimeTo',
        'duration' => 'getDuration',
        'depot_duration' => 'getDepotDuration',
        'active' => 'getActive',
        'route_id' => 'getRouteId',
        'route_nr' => 'getRouteNr',
        'route_name' => 'getRouteName',
        'route_date_time_from' => 'getRouteDateTimeFrom',
        'route_date_time_to' => 'getRouteDateTimeTo',
        'route_earliest_date_time' => 'getRouteEarliestDateTime',
        'route_latest_date_time' => 'getRouteLatestDateTime',
        'route_status_id' => 'getRouteStatusId',
        'route_status_name' => 'getRouteStatusName',
        'route_nr_of_stops' => 'getRouteNrOfStops',
        'route_overdue' => 'getRouteOverdue',
        'co_driver_ids' => 'getCoDriverIds',
        'co_drivers' => 'getCoDrivers',
        'user_id' => 'getUserId',
        'driver_id' => 'getDriverId',
        'driver_first_name' => 'getDriverFirstName',
        'driver_last_name' => 'getDriverLastName',
        'driver_name_prefix' => 'getDriverNamePrefix',
        'driver_full_name' => 'getDriverFullName',
        'addressapplied_id' => 'getAddressappliedId',
        'address_id' => 'getAddressId',
        'address' => 'getAddress',
        'address_applied' => 'getAddressApplied',
        'depot_address' => 'getDepotAddress',
        'depot_address_id' => 'getDepotAddressId',
        'depot_activity' => 'getDepotActivity',
        'allowed_driver_ids' => 'getAllowedDriverIds',
        'allowed_drivers' => 'getAllowedDrivers',
        'allowed_drivers_links' => 'getAllowedDriversLinks',
        'applied_capacities' => 'getAppliedCapacities',
        'capacities' => 'getCapacities',
        'package_lines' => 'getPackageLines',
        'payments' => 'getPayments',
        'time_slots' => 'getTimeSlots',
        'brand_id' => 'getBrandId',
        'brand_name' => 'getBrandName',
        'brand' => 'getBrand',
        'communication' => 'getCommunication',
        'assignment_link' => 'getAssignmentLink',
        'route_link' => 'getRouteLink',
        'route' => 'getRoute',
        'driver' => 'getDriver',
        'driver_links' => 'getDriverLinks',
        'car' => 'getCar',
        'vehicle' => 'getVehicle',
        'trailer' => 'getTrailer',
        'activity_id_before' => 'getActivityIdBefore',
        'activity_id_after' => 'getActivityIdAfter',
        'bundled_activity_ids' => 'getBundledActivityIds',
        'tags' => 'getTags',
        'recurrence' => 'getRecurrence',
        'tag_names' => 'getTagNames',
        'tag_ids' => 'getTagIds',
        'zones' => 'getZones',
        'zone_names' => 'getZoneNames',
        'links' => 'getLinks',
        'meta_data' => 'getMetaData',
        'stats' => 'getStats',
        'notes' => 'getNotes',
        'files' => 'getFiles',
        'activity_created_at' => 'getActivityCreatedAt',
        'activity_updated_at' => 'getActivityUpdatedAt',
        'activity_created_by' => 'getActivityCreatedBy',
        'activity_updated_by' => 'getActivityUpdatedBy',
        'activity_created_by_user' => 'getActivityCreatedByUser',
        'activity_updated_by_user' => 'getActivityUpdatedByUser',
        'activity_active' => 'getActivityActive',
        'activity_removed' => 'getActivityRemoved',
        'payment_total' => 'getPaymentTotal',
        'transaction_total' => 'getTransactionTotal',
        'due_total' => 'getDueTotal',
        'transactions' => 'getTransactions'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const ACTIVITY_TYPE_NAME_BREAKDOWN = 'breakdown';
    const ACTIVITY_TYPE_NAME_BUNDLED = 'bundled';
    const ACTIVITY_TYPE_NAME_CAR_END = 'car_end';
    const ACTIVITY_TYPE_NAME_CAR_START = 'car_start';
    const ACTIVITY_TYPE_NAME_CAR_WASH = 'car_wash';
    const ACTIVITY_TYPE_NAME_COMBI = 'combi';
    const ACTIVITY_TYPE_NAME_DEPOT = 'depot';
    const ACTIVITY_TYPE_NAME_DRIVER_END = 'driver_end';
    const ACTIVITY_TYPE_NAME_DRIVER_START = 'driver_start';
    const ACTIVITY_TYPE_NAME_DROPOFF = 'dropoff';
    const ACTIVITY_TYPE_NAME_GAS_REFILL = 'gas_refill';
    const ACTIVITY_TYPE_NAME_INTERIOR_WASH = 'interior_wash';
    const ACTIVITY_TYPE_NAME_MAINTENANCE = 'maintenance';
    const ACTIVITY_TYPE_NAME_MAINTENANCE_PLANNED = 'maintenance_planned';
    const ACTIVITY_TYPE_NAME_MAINTENANCE_UNPLANNED = 'maintenance_unplanned';
    const ACTIVITY_TYPE_NAME_OTHER = 'other';
    const ACTIVITY_TYPE_NAME_PAUSE = 'pause';
    const ACTIVITY_TYPE_NAME_PICKUP = 'pickup';
    const ACTIVITY_TYPE_NAME_ROUTE_END = 'route_end';
    const ACTIVITY_TYPE_NAME_ROUTE_START = 'route_start';
    const ACTIVITY_TYPE_NAME_SANITARY = 'sanitary';
    const ACTIVITY_TYPE_NAME_STOP = 'stop';
    const ACTIVITY_TYPE_NAME_UNPLANNED_STOP = 'unplanned_stop';
    const ACTIVITY_TYPE_NAME_USER_OTHER = 'user_other';
    const ACTIVITY_TYPE_NAME_WAIT = 'wait';
    const ACTIVITY_TYPE_ID_1 = 1;
    const ACTIVITY_TYPE_ID_2 = 2;
    const ACTIVITY_TYPE_ID_3 = 3;
    const ACTIVITY_TYPE_ID_4 = 4;
    const ACTIVITY_TYPE_ID_5 = 5;
    const ACTIVITY_TYPE_ID_6 = 6;
    const ACTIVITY_TYPE_ID_9 = 9;
    const ACTIVITY_TYPE_ID_10 = 10;
    const ACTIVITY_TYPE_ID_11 = 11;
    const ACTIVITY_TYPE_ID_13 = 13;
    const ACTIVITY_TYPE_ID_14 = 14;
    const ACTIVITY_TYPE_ID_15 = 15;
    const ACTIVITY_TYPE_ID_16 = 16;
    const ACTIVITY_TYPE_ID_17 = 17;
    const ACTIVITY_TYPE_ID_18 = 18;
    const ACTIVITY_TYPE_ID_19 = 19;
    const ACTIVITY_TYPE_ID_20 = 20;
    const ACTIVITY_TYPE_ID_21 = 21;
    const ACTIVITY_TYPE_ID_26 = 26;
    const ACTIVITY_TYPE_ID_27 = 27;
    const ACTIVITY_TYPE_ID_28 = 28;
    const ACTIVITY_TYPE_ID_29 = 29;
    const ACTIVITY_TYPE_ID_30 = 30;
    const ACTIVITY_TYPE_ID_31 = 31;
    const ACTIVITY_TYPE_ID_32 = 32;
    const STATUS_NAME_INCOMPLETE = 'activity_incomplete';
    const STATUS_NAME__NEW = 'activity_new';
    const STATUS_NAME_ACCEPTED = 'activity_accepted';
    const STATUS_NAME_PLANNED = 'activity_planned';
    const STATUS_NAME_IN_PROGRESS = 'activity_in_progress';
    const STATUS_NAME_EXECUTED = 'activity_executed';
    const STATUS_NAME_CANCELLED = 'activity_cancelled';
    const STATUS_NAME_AWAITING = 'activity_awaiting';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActivityTypeNameAllowableValues()
    {
        return [
            self::ACTIVITY_TYPE_NAME_BREAKDOWN,
            self::ACTIVITY_TYPE_NAME_BUNDLED,
            self::ACTIVITY_TYPE_NAME_CAR_END,
            self::ACTIVITY_TYPE_NAME_CAR_START,
            self::ACTIVITY_TYPE_NAME_CAR_WASH,
            self::ACTIVITY_TYPE_NAME_COMBI,
            self::ACTIVITY_TYPE_NAME_DEPOT,
            self::ACTIVITY_TYPE_NAME_DRIVER_END,
            self::ACTIVITY_TYPE_NAME_DRIVER_START,
            self::ACTIVITY_TYPE_NAME_DROPOFF,
            self::ACTIVITY_TYPE_NAME_GAS_REFILL,
            self::ACTIVITY_TYPE_NAME_INTERIOR_WASH,
            self::ACTIVITY_TYPE_NAME_MAINTENANCE,
            self::ACTIVITY_TYPE_NAME_MAINTENANCE_PLANNED,
            self::ACTIVITY_TYPE_NAME_MAINTENANCE_UNPLANNED,
            self::ACTIVITY_TYPE_NAME_OTHER,
            self::ACTIVITY_TYPE_NAME_PAUSE,
            self::ACTIVITY_TYPE_NAME_PICKUP,
            self::ACTIVITY_TYPE_NAME_ROUTE_END,
            self::ACTIVITY_TYPE_NAME_ROUTE_START,
            self::ACTIVITY_TYPE_NAME_SANITARY,
            self::ACTIVITY_TYPE_NAME_STOP,
            self::ACTIVITY_TYPE_NAME_UNPLANNED_STOP,
            self::ACTIVITY_TYPE_NAME_USER_OTHER,
            self::ACTIVITY_TYPE_NAME_WAIT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getActivityTypeIdAllowableValues()
    {
        return [
            self::ACTIVITY_TYPE_ID_1,
            self::ACTIVITY_TYPE_ID_2,
            self::ACTIVITY_TYPE_ID_3,
            self::ACTIVITY_TYPE_ID_4,
            self::ACTIVITY_TYPE_ID_5,
            self::ACTIVITY_TYPE_ID_6,
            self::ACTIVITY_TYPE_ID_9,
            self::ACTIVITY_TYPE_ID_10,
            self::ACTIVITY_TYPE_ID_11,
            self::ACTIVITY_TYPE_ID_13,
            self::ACTIVITY_TYPE_ID_14,
            self::ACTIVITY_TYPE_ID_15,
            self::ACTIVITY_TYPE_ID_16,
            self::ACTIVITY_TYPE_ID_17,
            self::ACTIVITY_TYPE_ID_18,
            self::ACTIVITY_TYPE_ID_19,
            self::ACTIVITY_TYPE_ID_20,
            self::ACTIVITY_TYPE_ID_21,
            self::ACTIVITY_TYPE_ID_26,
            self::ACTIVITY_TYPE_ID_27,
            self::ACTIVITY_TYPE_ID_28,
            self::ACTIVITY_TYPE_ID_29,
            self::ACTIVITY_TYPE_ID_30,
            self::ACTIVITY_TYPE_ID_31,
            self::ACTIVITY_TYPE_ID_32,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getStatusNameAllowableValues()
    {
        return [
            self::STATUS_NAME_INCOMPLETE,
            self::STATUS_NAME__NEW,
            self::STATUS_NAME_ACCEPTED,
            self::STATUS_NAME_PLANNED,
            self::STATUS_NAME_IN_PROGRESS,
            self::STATUS_NAME_EXECUTED,
            self::STATUS_NAME_CANCELLED,
            self::STATUS_NAME_AWAITING,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['bundle_activity_id'] = isset($data['bundle_activity_id']) ? $data['bundle_activity_id'] : null;
        $this->container['shipment_activity_id'] = isset($data['shipment_activity_id']) ? $data['shipment_activity_id'] : null;
        $this->container['shipment_activity_nr'] = isset($data['shipment_activity_nr']) ? $data['shipment_activity_nr'] : null;
        $this->container['bundle_shipment_activity_nr'] = isset($data['bundle_shipment_activity_nr']) ? $data['bundle_shipment_activity_nr'] : null;
        $this->container['nr'] = isset($data['nr']) ? $data['nr'] : null;
        $this->container['activity_type_name'] = isset($data['activity_type_name']) ? $data['activity_type_name'] : null;
        $this->container['activity_type_id'] = isset($data['activity_type_id']) ? $data['activity_type_id'] : null;
        $this->container['status_id'] = isset($data['status_id']) ? $data['status_id'] : null;
        $this->container['status_name'] = isset($data['status_name']) ? $data['status_name'] : null;
        $this->container['assignment_id'] = isset($data['assignment_id']) ? $data['assignment_id'] : null;
        $this->container['assignment_nr'] = isset($data['assignment_nr']) ? $data['assignment_nr'] : null;
        $this->container['assignment'] = isset($data['assignment']) ? $data['assignment'] : null;
        $this->container['assignment_sequence_nr'] = isset($data['assignment_sequence_nr']) ? $data['assignment_sequence_nr'] : null;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['locked'] = isset($data['locked']) ? $data['locked'] : null;
        $this->container['optimized'] = isset($data['optimized']) ? $data['optimized'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['top_priority'] = isset($data['top_priority']) ? $data['top_priority'] : null;
        $this->container['sequence_nr'] = isset($data['sequence_nr']) ? $data['sequence_nr'] : null;
        $this->container['planned_driving_time'] = isset($data['planned_driving_time']) ? $data['planned_driving_time'] : null;
        $this->container['planned_driving_duration'] = isset($data['planned_driving_duration']) ? $data['planned_driving_duration'] : null;
        $this->container['planned_driving_distance'] = isset($data['planned_driving_distance']) ? $data['planned_driving_distance'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['earliest_delivery_date_time'] = isset($data['earliest_delivery_date_time']) ? $data['earliest_delivery_date_time'] : null;
        $this->container['latest_delivery_date_time'] = isset($data['latest_delivery_date_time']) ? $data['latest_delivery_date_time'] : null;
        $this->container['earliest_delivery_date'] = isset($data['earliest_delivery_date']) ? $data['earliest_delivery_date'] : null;
        $this->container['latest_delivery_date'] = isset($data['latest_delivery_date']) ? $data['latest_delivery_date'] : null;
        $this->container['date_time_from'] = isset($data['date_time_from']) ? $data['date_time_from'] : null;
        $this->container['date_time_to'] = isset($data['date_time_to']) ? $data['date_time_to'] : null;
        $this->container['planned_date_time_from'] = isset($data['planned_date_time_from']) ? $data['planned_date_time_from'] : null;
        $this->container['planned_date_time_to'] = isset($data['planned_date_time_to']) ? $data['planned_date_time_to'] : null;
        $this->container['executed_date_time_from'] = isset($data['executed_date_time_from']) ? $data['executed_date_time_from'] : null;
        $this->container['executed_date_time_to'] = isset($data['executed_date_time_to']) ? $data['executed_date_time_to'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['depot_duration'] = isset($data['depot_duration']) ? $data['depot_duration'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['route_id'] = isset($data['route_id']) ? $data['route_id'] : null;
        $this->container['route_nr'] = isset($data['route_nr']) ? $data['route_nr'] : null;
        $this->container['route_name'] = isset($data['route_name']) ? $data['route_name'] : null;
        $this->container['route_date_time_from'] = isset($data['route_date_time_from']) ? $data['route_date_time_from'] : null;
        $this->container['route_date_time_to'] = isset($data['route_date_time_to']) ? $data['route_date_time_to'] : null;
        $this->container['route_earliest_date_time'] = isset($data['route_earliest_date_time']) ? $data['route_earliest_date_time'] : null;
        $this->container['route_latest_date_time'] = isset($data['route_latest_date_time']) ? $data['route_latest_date_time'] : null;
        $this->container['route_status_id'] = isset($data['route_status_id']) ? $data['route_status_id'] : null;
        $this->container['route_status_name'] = isset($data['route_status_name']) ? $data['route_status_name'] : null;
        $this->container['route_nr_of_stops'] = isset($data['route_nr_of_stops']) ? $data['route_nr_of_stops'] : null;
        $this->container['route_overdue'] = isset($data['route_overdue']) ? $data['route_overdue'] : null;
        $this->container['co_driver_ids'] = isset($data['co_driver_ids']) ? $data['co_driver_ids'] : null;
        $this->container['co_drivers'] = isset($data['co_drivers']) ? $data['co_drivers'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['driver_first_name'] = isset($data['driver_first_name']) ? $data['driver_first_name'] : null;
        $this->container['driver_last_name'] = isset($data['driver_last_name']) ? $data['driver_last_name'] : null;
        $this->container['driver_name_prefix'] = isset($data['driver_name_prefix']) ? $data['driver_name_prefix'] : null;
        $this->container['driver_full_name'] = isset($data['driver_full_name']) ? $data['driver_full_name'] : null;
        $this->container['addressapplied_id'] = isset($data['addressapplied_id']) ? $data['addressapplied_id'] : null;
        $this->container['address_id'] = isset($data['address_id']) ? $data['address_id'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_applied'] = isset($data['address_applied']) ? $data['address_applied'] : null;
        $this->container['depot_address'] = isset($data['depot_address']) ? $data['depot_address'] : null;
        $this->container['depot_address_id'] = isset($data['depot_address_id']) ? $data['depot_address_id'] : null;
        $this->container['depot_activity'] = isset($data['depot_activity']) ? $data['depot_activity'] : null;
        $this->container['allowed_driver_ids'] = isset($data['allowed_driver_ids']) ? $data['allowed_driver_ids'] : null;
        $this->container['allowed_drivers'] = isset($data['allowed_drivers']) ? $data['allowed_drivers'] : null;
        $this->container['allowed_drivers_links'] = isset($data['allowed_drivers_links']) ? $data['allowed_drivers_links'] : null;
        $this->container['applied_capacities'] = isset($data['applied_capacities']) ? $data['applied_capacities'] : null;
        $this->container['capacities'] = isset($data['capacities']) ? $data['capacities'] : null;
        $this->container['package_lines'] = isset($data['package_lines']) ? $data['package_lines'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
        $this->container['time_slots'] = isset($data['time_slots']) ? $data['time_slots'] : null;
        $this->container['brand_id'] = isset($data['brand_id']) ? $data['brand_id'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['communication'] = isset($data['communication']) ? $data['communication'] : null;
        $this->container['assignment_link'] = isset($data['assignment_link']) ? $data['assignment_link'] : null;
        $this->container['route_link'] = isset($data['route_link']) ? $data['route_link'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['driver'] = isset($data['driver']) ? $data['driver'] : null;
        $this->container['driver_links'] = isset($data['driver_links']) ? $data['driver_links'] : null;
        $this->container['car'] = isset($data['car']) ? $data['car'] : null;
        $this->container['vehicle'] = isset($data['vehicle']) ? $data['vehicle'] : null;
        $this->container['trailer'] = isset($data['trailer']) ? $data['trailer'] : null;
        $this->container['activity_id_before'] = isset($data['activity_id_before']) ? $data['activity_id_before'] : null;
        $this->container['activity_id_after'] = isset($data['activity_id_after']) ? $data['activity_id_after'] : null;
        $this->container['bundled_activity_ids'] = isset($data['bundled_activity_ids']) ? $data['bundled_activity_ids'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['tag_names'] = isset($data['tag_names']) ? $data['tag_names'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
        $this->container['zone_names'] = isset($data['zone_names']) ? $data['zone_names'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['stats'] = isset($data['stats']) ? $data['stats'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['activity_created_at'] = isset($data['activity_created_at']) ? $data['activity_created_at'] : null;
        $this->container['activity_updated_at'] = isset($data['activity_updated_at']) ? $data['activity_updated_at'] : null;
        $this->container['activity_created_by'] = isset($data['activity_created_by']) ? $data['activity_created_by'] : null;
        $this->container['activity_updated_by'] = isset($data['activity_updated_by']) ? $data['activity_updated_by'] : null;
        $this->container['activity_created_by_user'] = isset($data['activity_created_by_user']) ? $data['activity_created_by_user'] : null;
        $this->container['activity_updated_by_user'] = isset($data['activity_updated_by_user']) ? $data['activity_updated_by_user'] : null;
        $this->container['activity_active'] = isset($data['activity_active']) ? $data['activity_active'] : null;
        $this->container['activity_removed'] = isset($data['activity_removed']) ? $data['activity_removed'] : null;
        $this->container['payment_total'] = isset($data['payment_total']) ? $data['payment_total'] : null;
        $this->container['transaction_total'] = isset($data['transaction_total']) ? $data['transaction_total'] : null;
        $this->container['due_total'] = isset($data['due_total']) ? $data['due_total'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getActivityTypeNameAllowableValues();
        if (!in_array($this->container['activity_type_name'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'activity_type_name', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getActivityTypeIdAllowableValues();
        if (!in_array($this->container['activity_type_id'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'activity_type_id', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        $allowed_values = $this->getStatusNameAllowableValues();
        if (!in_array($this->container['status_name'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'status_name', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getActivityTypeNameAllowableValues();
        if (!in_array($this->container['activity_type_name'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getActivityTypeIdAllowableValues();
        if (!in_array($this->container['activity_type_id'], $allowed_values)) {
            return false;
        }
        $allowed_values = $this->getStatusNameAllowableValues();
        if (!in_array($this->container['status_name'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid unique per activity
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets bundle_activity_id
     * @return int
     */
    public function getBundleActivityId()
    {
        return $this->container['bundle_activity_id'];
    }

    /**
     * Sets bundle_activity_id
     * @param int $bundle_activity_id Unique Identifier for partner shipment activity
     * @return $this
     */
    public function setBundleActivityId($bundle_activity_id)
    {
        $this->container['bundle_activity_id'] = $bundle_activity_id;

        return $this;
    }

    /**
     * Gets shipment_activity_id
     * @return int
     */
    public function getShipmentActivityId()
    {
        return $this->container['shipment_activity_id'];
    }

    /**
     * Sets shipment_activity_id
     * @param int $shipment_activity_id Unique Identifier for partner shipment activity
     * @return $this
     */
    public function setShipmentActivityId($shipment_activity_id)
    {
        $this->container['shipment_activity_id'] = $shipment_activity_id;

        return $this;
    }

    /**
     * Gets shipment_activity_nr
     * @return string
     */
    public function getShipmentActivityNr()
    {
        return $this->container['shipment_activity_nr'];
    }

    /**
     * Sets shipment_activity_nr
     * @param string $shipment_activity_nr Number for partner shipment activity
     * @return $this
     */
    public function setShipmentActivityNr($shipment_activity_nr)
    {
        $this->container['shipment_activity_nr'] = $shipment_activity_nr;

        return $this;
    }

    /**
     * Gets bundle_shipment_activity_nr
     * @return string
     */
    public function getBundleShipmentActivityNr()
    {
        return $this->container['bundle_shipment_activity_nr'];
    }

    /**
     * Sets bundle_shipment_activity_nr
     * @param string $bundle_shipment_activity_nr Number for partner bundle shipment activity
     * @return $this
     */
    public function setBundleShipmentActivityNr($bundle_shipment_activity_nr)
    {
        $this->container['bundle_shipment_activity_nr'] = $bundle_shipment_activity_nr;

        return $this;
    }

    /**
     * Gets nr
     * @return string
     */
    public function getNr()
    {
        return $this->container['nr'];
    }

    /**
     * Sets nr
     * @param string $nr Number of this Activity
     * @return $this
     */
    public function setNr($nr)
    {
        $this->container['nr'] = $nr;

        return $this;
    }

    /**
     * Gets activity_type_name
     * @return string
     */
    public function getActivityTypeName()
    {
        return $this->container['activity_type_name'];
    }

    /**
     * Sets activity_type_name
     * @param string $activity_type_name Activity Type Name. breakdown (:20), bundled (:32), car_end (:6), car_start (:5), car_wash (:27), combi (:29), depot (:28), driver_end (:10), driver_start (:9), dropoff (:2), gas_refill (:14), interior_wash (:30), maintenance (:26), maintenance_planned (:15), maintenance_unplanned (:16), other (:31), pause (:13), pickup (:1), route_end (:4), route_start (:3), sanitary (:21), stop (:11), unplanned_stop (:18), user_other (:17), wait (:19)
     * @return $this
     */
    public function setActivityTypeName($activity_type_name)
    {
        $allowed_values = $this->getActivityTypeNameAllowableValues();
        if (!is_null($activity_type_name) && !in_array($activity_type_name, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activity_type_name', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['activity_type_name'] = $activity_type_name;

        return $this;
    }

    /**
     * Gets activity_type_id
     * @return int
     */
    public function getActivityTypeId()
    {
        return $this->container['activity_type_id'];
    }

    /**
     * Sets activity_type_id
     * @param int $activity_type_id Unique Activity type ID. 1 (:pickup), 2 (:dropoff), 3 (:route_start), 4 (:route_end), 5 (:car_start), 6 (:car_end), 9 (:driver_start), 10 (:driver_end), 11 (:stop), 13 (:pause), 14 (:gas_refill), 15 (:maintenance_planned), 16 (:maintenance_unplanned), 17 (:user_other), 18 (:unplanned_stop), 19 (:wait), 20 (:breakdown), 21 (:sanitary), 26 (:maintenance), 27 (:car_wash), 28 (:depot), 29 (:combi), 30 (:interior_wash), 31 (:other), 32 (:bundled)
     * @return $this
     */
    public function setActivityTypeId($activity_type_id)
    {
        $allowed_values = $this->getActivityTypeIdAllowableValues();
        if (!is_null($activity_type_id) && !in_array($activity_type_id, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'activity_type_id', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['activity_type_id'] = $activity_type_id;

        return $this;
    }

    /**
     * Gets status_id
     * @return int
     */
    public function getStatusId()
    {
        return $this->container['status_id'];
    }

    /**
     * Sets status_id
     * @param int $status_id StatusId of this Activity, 28: activity_cancelled, 20: activity_incomplete, 21: activity_new, 39: activity_awaiting, 22: activity_accepted, 3: activity_planned, 4: activity_in_progress, 9: activity_executed
     * @return $this
     */
    public function setStatusId($status_id)
    {
        $this->container['status_id'] = $status_id;

        return $this;
    }

    /**
     * Gets status_name
     * @return string
     */
    public function getStatusName()
    {
        return $this->container['status_name'];
    }

    /**
     * Sets status_name
     * @param string $status_name Activity Status
     * @return $this
     */
    public function setStatusName($status_name)
    {
        $allowed_values = $this->getStatusNameAllowableValues();
        if (!is_null($status_name) && !in_array($status_name, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status_name', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['status_name'] = $status_name;

        return $this;
    }

    /**
     * Gets assignment_id
     * @return int
     */
    public function getAssignmentId()
    {
        return $this->container['assignment_id'];
    }

    /**
     * Sets assignment_id
     * @param int $assignment_id Assignment ID
     * @return $this
     */
    public function setAssignmentId($assignment_id)
    {
        $this->container['assignment_id'] = $assignment_id;

        return $this;
    }

    /**
     * Gets assignment_nr
     * @return string
     */
    public function getAssignmentNr()
    {
        return $this->container['assignment_nr'];
    }

    /**
     * Sets assignment_nr
     * @param string $assignment_nr Assignment NR
     * @return $this
     */
    public function setAssignmentNr($assignment_nr)
    {
        $this->container['assignment_nr'] = $assignment_nr;

        return $this;
    }

    /**
     * Gets assignment
     * @return \BumbalClient\Model\AssignmentModel
     */
    public function getAssignment()
    {
        return $this->container['assignment'];
    }

    /**
     * Sets assignment
     * @param \BumbalClient\Model\AssignmentModel $assignment 
     * @return $this
     */
    public function setAssignment($assignment)
    {
        $this->container['assignment'] = $assignment;

        return $this;
    }

    /**
     * Gets assignment_sequence_nr
     * @return int
     */
    public function getAssignmentSequenceNr()
    {
        return $this->container['assignment_sequence_nr'];
    }

    /**
     * Sets assignment_sequence_nr
     * @param int $assignment_sequence_nr Assignment sequence number for multi day assignments
     * @return $this
     */
    public function setAssignmentSequenceNr($assignment_sequence_nr)
    {
        $this->container['assignment_sequence_nr'] = $assignment_sequence_nr;

        return $this;
    }

    /**
     * Gets remarks
     * @return string
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     * @param string $remarks Remarks about this activity
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets locked
     * @return int
     */
    public function getLocked()
    {
        return $this->container['locked'];
    }

    /**
     * Sets locked
     * @param int $locked Activity locked status. 0= not locked. 1= locked on a Route and time. 2= locke don route only.
     * @return $this
     */
    public function setLocked($locked)
    {
        $this->container['locked'] = $locked;

        return $this;
    }

    /**
     * Gets optimized
     * @return bool
     */
    public function getOptimized()
    {
        return $this->container['optimized'];
    }

    /**
     * Sets optimized
     * @param bool $optimized Activity optimized status within route.
     * @return $this
     */
    public function setOptimized($optimized)
    {
        $this->container['optimized'] = $optimized;

        return $this;
    }

    /**
     * Gets priority
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     * @param int $priority Priority level. 1 for highest priority, 3 for lowest priority. Default = 2
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets top_priority
     * @return bool
     */
    public function getTopPriority()
    {
        return $this->container['top_priority'];
    }

    /**
     * Sets top_priority
     * @param bool $top_priority Activity has top priority
     * @return $this
     */
    public function setTopPriority($top_priority)
    {
        $this->container['top_priority'] = $top_priority;

        return $this;
    }

    /**
     * Gets sequence_nr
     * @return int
     */
    public function getSequenceNr()
    {
        return $this->container['sequence_nr'];
    }

    /**
     * Sets sequence_nr
     * @param int $sequence_nr Sequence number on Route
     * @return $this
     */
    public function setSequenceNr($sequence_nr)
    {
        $this->container['sequence_nr'] = $sequence_nr;

        return $this;
    }

    /**
     * Gets planned_driving_time
     * @return int
     */
    public function getPlannedDrivingTime()
    {
        return $this->container['planned_driving_time'];
    }

    /**
     * Sets planned_driving_time
     * @param int $planned_driving_time Deprecated! Driving time from the activity before this one
     * @return $this
     */
    public function setPlannedDrivingTime($planned_driving_time)
    {
        $this->container['planned_driving_time'] = $planned_driving_time;

        return $this;
    }

    /**
     * Gets planned_driving_duration
     * @return int
     */
    public function getPlannedDrivingDuration()
    {
        return $this->container['planned_driving_duration'];
    }

    /**
     * Sets planned_driving_duration
     * @param int $planned_driving_duration Driving time from the activity before this one
     * @return $this
     */
    public function setPlannedDrivingDuration($planned_driving_duration)
    {
        $this->container['planned_driving_duration'] = $planned_driving_duration;

        return $this;
    }

    /**
     * Gets planned_driving_distance
     * @return int
     */
    public function getPlannedDrivingDistance()
    {
        return $this->container['planned_driving_distance'];
    }

    /**
     * Sets planned_driving_distance
     * @param int $planned_driving_distance Driving distance from the activity before this one
     * @return $this
     */
    public function setPlannedDrivingDistance($planned_driving_distance)
    {
        $this->container['planned_driving_distance'] = $planned_driving_distance;

        return $this;
    }

    /**
     * Gets reference
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     * @param string $reference Reference of this activity
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description description of this activity
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets earliest_delivery_date_time
     * @return \DateTime
     */
    public function getEarliestDeliveryDateTime()
    {
        return $this->container['earliest_delivery_date_time'];
    }

    /**
     * Sets earliest_delivery_date_time
     * @param \DateTime $earliest_delivery_date_time 
     * @return $this
     */
    public function setEarliestDeliveryDateTime($earliest_delivery_date_time)
    {
        $this->container['earliest_delivery_date_time'] = $earliest_delivery_date_time;

        return $this;
    }

    /**
     * Gets latest_delivery_date_time
     * @return \DateTime
     */
    public function getLatestDeliveryDateTime()
    {
        return $this->container['latest_delivery_date_time'];
    }

    /**
     * Sets latest_delivery_date_time
     * @param \DateTime $latest_delivery_date_time 
     * @return $this
     */
    public function setLatestDeliveryDateTime($latest_delivery_date_time)
    {
        $this->container['latest_delivery_date_time'] = $latest_delivery_date_time;

        return $this;
    }

    /**
     * Gets earliest_delivery_date
     * @return \DateTime
     */
    public function getEarliestDeliveryDate()
    {
        return $this->container['earliest_delivery_date'];
    }

    /**
     * Sets earliest_delivery_date
     * @param \DateTime $earliest_delivery_date 
     * @return $this
     */
    public function setEarliestDeliveryDate($earliest_delivery_date)
    {
        $this->container['earliest_delivery_date'] = $earliest_delivery_date;

        return $this;
    }

    /**
     * Gets latest_delivery_date
     * @return \DateTime
     */
    public function getLatestDeliveryDate()
    {
        return $this->container['latest_delivery_date'];
    }

    /**
     * Sets latest_delivery_date
     * @param \DateTime $latest_delivery_date 
     * @return $this
     */
    public function setLatestDeliveryDate($latest_delivery_date)
    {
        $this->container['latest_delivery_date'] = $latest_delivery_date;

        return $this;
    }

    /**
     * Gets date_time_from
     * @return \DateTime
     */
    public function getDateTimeFrom()
    {
        return $this->container['date_time_from'];
    }

    /**
     * Sets date_time_from
     * @param \DateTime $date_time_from Earliest date-time
     * @return $this
     */
    public function setDateTimeFrom($date_time_from)
    {
        $this->container['date_time_from'] = $date_time_from;

        return $this;
    }

    /**
     * Gets date_time_to
     * @return \DateTime
     */
    public function getDateTimeTo()
    {
        return $this->container['date_time_to'];
    }

    /**
     * Sets date_time_to
     * @param \DateTime $date_time_to latest date-time
     * @return $this
     */
    public function setDateTimeTo($date_time_to)
    {
        $this->container['date_time_to'] = $date_time_to;

        return $this;
    }

    /**
     * Gets planned_date_time_from
     * @return \DateTime
     */
    public function getPlannedDateTimeFrom()
    {
        return $this->container['planned_date_time_from'];
    }

    /**
     * Sets planned_date_time_from
     * @param \DateTime $planned_date_time_from planned date-time from (only filled for planned activities)
     * @return $this
     */
    public function setPlannedDateTimeFrom($planned_date_time_from)
    {
        $this->container['planned_date_time_from'] = $planned_date_time_from;

        return $this;
    }

    /**
     * Gets planned_date_time_to
     * @return \DateTime
     */
    public function getPlannedDateTimeTo()
    {
        return $this->container['planned_date_time_to'];
    }

    /**
     * Sets planned_date_time_to
     * @param \DateTime $planned_date_time_to planned date-time to (only filled for planned activities)
     * @return $this
     */
    public function setPlannedDateTimeTo($planned_date_time_to)
    {
        $this->container['planned_date_time_to'] = $planned_date_time_to;

        return $this;
    }

    /**
     * Gets executed_date_time_from
     * @return \DateTime
     */
    public function getExecutedDateTimeFrom()
    {
        return $this->container['executed_date_time_from'];
    }

    /**
     * Sets executed_date_time_from
     * @param \DateTime $executed_date_time_from executed date-time from (only filled for executed activities)
     * @return $this
     */
    public function setExecutedDateTimeFrom($executed_date_time_from)
    {
        $this->container['executed_date_time_from'] = $executed_date_time_from;

        return $this;
    }

    /**
     * Gets executed_date_time_to
     * @return \DateTime
     */
    public function getExecutedDateTimeTo()
    {
        return $this->container['executed_date_time_to'];
    }

    /**
     * Sets executed_date_time_to
     * @param \DateTime $executed_date_time_to executed date-time to (only filled for executed activities)
     * @return $this
     */
    public function setExecutedDateTimeTo($executed_date_time_to)
    {
        $this->container['executed_date_time_to'] = $executed_date_time_to;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration Duration of this activity in minutes
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets depot_duration
     * @return int
     */
    public function getDepotDuration()
    {
        return $this->container['depot_duration'];
    }

    /**
     * Sets depot_duration
     * @param int $depot_duration Duration of the depot activity in minutes
     * @return $this
     */
    public function setDepotDuration($depot_duration)
    {
        $this->container['depot_duration'] = $depot_duration;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active if active=0: activity has been removed and is no longer visible in any bumbal interface
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets route_id
     * @return string
     */
    public function getRouteId()
    {
        return $this->container['route_id'];
    }

    /**
     * Sets route_id
     * @param string $route_id Route ID (unique)
     * @return $this
     */
    public function setRouteId($route_id)
    {
        $this->container['route_id'] = $route_id;

        return $this;
    }

    /**
     * Gets route_nr
     * @return string
     */
    public function getRouteNr()
    {
        return $this->container['route_nr'];
    }

    /**
     * Sets route_nr
     * @param string $route_nr Route Number (not unique)
     * @return $this
     */
    public function setRouteNr($route_nr)
    {
        $this->container['route_nr'] = $route_nr;

        return $this;
    }

    /**
     * Gets route_name
     * @return string
     */
    public function getRouteName()
    {
        return $this->container['route_name'];
    }

    /**
     * Sets route_name
     * @param string $route_name Route name
     * @return $this
     */
    public function setRouteName($route_name)
    {
        $this->container['route_name'] = $route_name;

        return $this;
    }

    /**
     * Gets route_date_time_from
     * @return \DateTime
     */
    public function getRouteDateTimeFrom()
    {
        return $this->container['route_date_time_from'];
    }

    /**
     * Sets route_date_time_from
     * @param \DateTime $route_date_time_from Start date-time of route
     * @return $this
     */
    public function setRouteDateTimeFrom($route_date_time_from)
    {
        $this->container['route_date_time_from'] = $route_date_time_from;

        return $this;
    }

    /**
     * Gets route_date_time_to
     * @return \DateTime
     */
    public function getRouteDateTimeTo()
    {
        return $this->container['route_date_time_to'];
    }

    /**
     * Sets route_date_time_to
     * @param \DateTime $route_date_time_to End date-time of route
     * @return $this
     */
    public function setRouteDateTimeTo($route_date_time_to)
    {
        $this->container['route_date_time_to'] = $route_date_time_to;

        return $this;
    }

    /**
     * Gets route_earliest_date_time
     * @return \DateTime
     */
    public function getRouteEarliestDateTime()
    {
        return $this->container['route_earliest_date_time'];
    }

    /**
     * Sets route_earliest_date_time
     * @param \DateTime $route_earliest_date_time Earliest date-time of route
     * @return $this
     */
    public function setRouteEarliestDateTime($route_earliest_date_time)
    {
        $this->container['route_earliest_date_time'] = $route_earliest_date_time;

        return $this;
    }

    /**
     * Gets route_latest_date_time
     * @return \DateTime
     */
    public function getRouteLatestDateTime()
    {
        return $this->container['route_latest_date_time'];
    }

    /**
     * Sets route_latest_date_time
     * @param \DateTime $route_latest_date_time Latest date-time of route
     * @return $this
     */
    public function setRouteLatestDateTime($route_latest_date_time)
    {
        $this->container['route_latest_date_time'] = $route_latest_date_time;

        return $this;
    }

    /**
     * Gets route_status_id
     * @return int
     */
    public function getRouteStatusId()
    {
        return $this->container['route_status_id'];
    }

    /**
     * Sets route_status_id
     * @param int $route_status_id Status ID of this Route
     * @return $this
     */
    public function setRouteStatusId($route_status_id)
    {
        $this->container['route_status_id'] = $route_status_id;

        return $this;
    }

    /**
     * Gets route_status_name
     * @return string
     */
    public function getRouteStatusName()
    {
        return $this->container['route_status_name'];
    }

    /**
     * Sets route_status_name
     * @param string $route_status_name Status Name of this Route
     * @return $this
     */
    public function setRouteStatusName($route_status_name)
    {
        $this->container['route_status_name'] = $route_status_name;

        return $this;
    }

    /**
     * Gets route_nr_of_stops
     * @return int
     */
    public function getRouteNrOfStops()
    {
        return $this->container['route_nr_of_stops'];
    }

    /**
     * Sets route_nr_of_stops
     * @param int $route_nr_of_stops Number of stops on this route
     * @return $this
     */
    public function setRouteNrOfStops($route_nr_of_stops)
    {
        $this->container['route_nr_of_stops'] = $route_nr_of_stops;

        return $this;
    }

    /**
     * Gets route_overdue
     * @return bool
     */
    public function getRouteOverdue()
    {
        return $this->container['route_overdue'];
    }

    /**
     * Sets route_overdue
     * @param bool $route_overdue Route is overdue
     * @return $this
     */
    public function setRouteOverdue($route_overdue)
    {
        $this->container['route_overdue'] = $route_overdue;

        return $this;
    }

    /**
     * Gets co_driver_ids
     * @return int[]
     */
    public function getCoDriverIds()
    {
        return $this->container['co_driver_ids'];
    }

    /**
     * Sets co_driver_ids
     * @param int[] $co_driver_ids Unique Identifier(s) for co-drivers on route
     * @return $this
     */
    public function setCoDriverIds($co_driver_ids)
    {
        $this->container['co_driver_ids'] = $co_driver_ids;

        return $this;
    }

    /**
     * Gets co_drivers
     * @return \BumbalClient\Model\UsersModel[]
     */
    public function getCoDrivers()
    {
        return $this->container['co_drivers'];
    }

    /**
     * Sets co_drivers
     * @param \BumbalClient\Model\UsersModel[] $co_drivers list of co-drivers on route
     * @return $this
     */
    public function setCoDrivers($co_drivers)
    {
        $this->container['co_drivers'] = $co_drivers;

        return $this;
    }

    /**
     * Gets user_id
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param int $user_id ID of the user who will execute this activity
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets driver_id
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     * @param int $driver_id Driver ID connected to this route/activity
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets driver_first_name
     * @return string
     */
    public function getDriverFirstName()
    {
        return $this->container['driver_first_name'];
    }

    /**
     * Sets driver_first_name
     * @param string $driver_first_name Driver first name
     * @return $this
     */
    public function setDriverFirstName($driver_first_name)
    {
        $this->container['driver_first_name'] = $driver_first_name;

        return $this;
    }

    /**
     * Gets driver_last_name
     * @return string
     */
    public function getDriverLastName()
    {
        return $this->container['driver_last_name'];
    }

    /**
     * Sets driver_last_name
     * @param string $driver_last_name Driver last name
     * @return $this
     */
    public function setDriverLastName($driver_last_name)
    {
        $this->container['driver_last_name'] = $driver_last_name;

        return $this;
    }

    /**
     * Gets driver_name_prefix
     * @return string
     */
    public function getDriverNamePrefix()
    {
        return $this->container['driver_name_prefix'];
    }

    /**
     * Sets driver_name_prefix
     * @param string $driver_name_prefix Driver prefix
     * @return $this
     */
    public function setDriverNamePrefix($driver_name_prefix)
    {
        $this->container['driver_name_prefix'] = $driver_name_prefix;

        return $this;
    }

    /**
     * Gets driver_full_name
     * @return string
     */
    public function getDriverFullName()
    {
        return $this->container['driver_full_name'];
    }

    /**
     * Sets driver_full_name
     * @param string $driver_full_name Driver full name
     * @return $this
     */
    public function setDriverFullName($driver_full_name)
    {
        $this->container['driver_full_name'] = $driver_full_name;

        return $this;
    }

    /**
     * Gets addressapplied_id
     * @return int
     */
    public function getAddressappliedId()
    {
        return $this->container['addressapplied_id'];
    }

    /**
     * Sets addressapplied_id
     * @param int $addressapplied_id Address Applied ID
     * @return $this
     */
    public function setAddressappliedId($addressapplied_id)
    {
        $this->container['addressapplied_id'] = $addressapplied_id;

        return $this;
    }

    /**
     * Gets address_id
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     * @param int $address_id Address ID
     * @return $this
     */
    public function setAddressId($address_id)
    {
        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address
     * @return \BumbalClient\Model\AddressModel
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     * @param \BumbalClient\Model\AddressModel $address 
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_applied
     * @return \BumbalClient\Model\AddressAppliedModel
     */
    public function getAddressApplied()
    {
        return $this->container['address_applied'];
    }

    /**
     * Sets address_applied
     * @param \BumbalClient\Model\AddressAppliedModel $address_applied 
     * @return $this
     */
    public function setAddressApplied($address_applied)
    {
        $this->container['address_applied'] = $address_applied;

        return $this;
    }

    /**
     * Gets depot_address
     * @return \BumbalClient\Model\AddressModel
     */
    public function getDepotAddress()
    {
        return $this->container['depot_address'];
    }

    /**
     * Sets depot_address
     * @param \BumbalClient\Model\AddressModel $depot_address 
     * @return $this
     */
    public function setDepotAddress($depot_address)
    {
        $this->container['depot_address'] = $depot_address;

        return $this;
    }

    /**
     * Gets depot_address_id
     * @return int
     */
    public function getDepotAddressId()
    {
        return $this->container['depot_address_id'];
    }

    /**
     * Sets depot_address_id
     * @param int $depot_address_id Depot Address ID
     * @return $this
     */
    public function setDepotAddressId($depot_address_id)
    {
        $this->container['depot_address_id'] = $depot_address_id;

        return $this;
    }

    /**
     * Gets depot_activity
     * @return \BumbalClient\Model\ActivityModel[]
     */
    public function getDepotActivity()
    {
        return $this->container['depot_activity'];
    }

    /**
     * Sets depot_activity
     * @param \BumbalClient\Model\ActivityModel[] $depot_activity 
     * @return $this
     */
    public function setDepotActivity($depot_activity)
    {
        $this->container['depot_activity'] = $depot_activity;

        return $this;
    }

    /**
     * Gets allowed_driver_ids
     * @return int[]
     */
    public function getAllowedDriverIds()
    {
        return $this->container['allowed_driver_ids'];
    }

    /**
     * Sets allowed_driver_ids
     * @param int[] $allowed_driver_ids Unique Identifier(s) for allowed drivers in activity
     * @return $this
     */
    public function setAllowedDriverIds($allowed_driver_ids)
    {
        $this->container['allowed_driver_ids'] = $allowed_driver_ids;

        return $this;
    }

    /**
     * Gets allowed_drivers
     * @return \BumbalClient\Model\AllowedDriverModel[]
     */
    public function getAllowedDrivers()
    {
        return $this->container['allowed_drivers'];
    }

    /**
     * Sets allowed_drivers
     * @param \BumbalClient\Model\AllowedDriverModel[] $allowed_drivers 
     * @return $this
     */
    public function setAllowedDrivers($allowed_drivers)
    {
        $this->container['allowed_drivers'] = $allowed_drivers;

        return $this;
    }

    /**
     * Gets allowed_drivers_links
     * @return \BumbalClient\Model\LinkModel[]
     */
    public function getAllowedDriversLinks()
    {
        return $this->container['allowed_drivers_links'];
    }

    /**
     * Sets allowed_drivers_links
     * @param \BumbalClient\Model\LinkModel[] $allowed_drivers_links 
     * @return $this
     */
    public function setAllowedDriversLinks($allowed_drivers_links)
    {
        $this->container['allowed_drivers_links'] = $allowed_drivers_links;

        return $this;
    }

    /**
     * Gets applied_capacities
     * @return object
     */
    public function getAppliedCapacities()
    {
        return $this->container['applied_capacities'];
    }

    /**
     * Sets applied_capacities
     * @param object $applied_capacities 
     * @return $this
     */
    public function setAppliedCapacities($applied_capacities)
    {
        $this->container['applied_capacities'] = $applied_capacities;

        return $this;
    }

    /**
     * Gets capacities
     * @return \BumbalClient\Model\CapacityModel[]
     */
    public function getCapacities()
    {
        return $this->container['capacities'];
    }

    /**
     * Sets capacities
     * @param \BumbalClient\Model\CapacityModel[] $capacities 
     * @return $this
     */
    public function setCapacities($capacities)
    {
        $this->container['capacities'] = $capacities;

        return $this;
    }

    /**
     * Gets package_lines
     * @return \BumbalClient\Model\PackageLineModel[]
     */
    public function getPackageLines()
    {
        return $this->container['package_lines'];
    }

    /**
     * Sets package_lines
     * @param \BumbalClient\Model\PackageLineModel[] $package_lines 
     * @return $this
     */
    public function setPackageLines($package_lines)
    {
        $this->container['package_lines'] = $package_lines;

        return $this;
    }

    /**
     * Gets payments
     * @return \BumbalClient\Model\PaymentModel[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     * @param \BumbalClient\Model\PaymentModel[] $payments 
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets time_slots
     * @return \BumbalClient\Model\TimeSlotModel[]
     */
    public function getTimeSlots()
    {
        return $this->container['time_slots'];
    }

    /**
     * Sets time_slots
     * @param \BumbalClient\Model\TimeSlotModel[] $time_slots 
     * @return $this
     */
    public function setTimeSlots($time_slots)
    {
        $this->container['time_slots'] = $time_slots;

        return $this;
    }

    /**
     * Gets brand_id
     * @return int
     */
    public function getBrandId()
    {
        return $this->container['brand_id'];
    }

    /**
     * Sets brand_id
     * @param int $brand_id Brand ID
     * @return $this
     */
    public function setBrandId($brand_id)
    {
        $this->container['brand_id'] = $brand_id;

        return $this;
    }

    /**
     * Gets brand_name
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     * @param string $brand_name Brand name (must be unique)
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets brand
     * @return \BumbalClient\Model\BrandModel
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     * @param \BumbalClient\Model\BrandModel $brand 
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets communication
     * @return \BumbalClient\Model\CommunicationModel
     */
    public function getCommunication()
    {
        return $this->container['communication'];
    }

    /**
     * Sets communication
     * @param \BumbalClient\Model\CommunicationModel $communication 
     * @return $this
     */
    public function setCommunication($communication)
    {
        $this->container['communication'] = $communication;

        return $this;
    }

    /**
     * Gets assignment_link
     * @return \BumbalClient\Model\LinkModel
     */
    public function getAssignmentLink()
    {
        return $this->container['assignment_link'];
    }

    /**
     * Sets assignment_link
     * @param \BumbalClient\Model\LinkModel $assignment_link 
     * @return $this
     */
    public function setAssignmentLink($assignment_link)
    {
        $this->container['assignment_link'] = $assignment_link;

        return $this;
    }

    /**
     * Gets route_link
     * @return \BumbalClient\Model\LinkModel
     */
    public function getRouteLink()
    {
        return $this->container['route_link'];
    }

    /**
     * Sets route_link
     * @param \BumbalClient\Model\LinkModel $route_link 
     * @return $this
     */
    public function setRouteLink($route_link)
    {
        $this->container['route_link'] = $route_link;

        return $this;
    }

    /**
     * Gets route
     * @return \BumbalClient\Model\RouteModel
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     * @param \BumbalClient\Model\RouteModel $route 
     * @return $this
     */
    public function setRoute($route)
    {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets driver
     * @return \BumbalClient\Model\DriverModel
     */
    public function getDriver()
    {
        return $this->container['driver'];
    }

    /**
     * Sets driver
     * @param \BumbalClient\Model\DriverModel $driver 
     * @return $this
     */
    public function setDriver($driver)
    {
        $this->container['driver'] = $driver;

        return $this;
    }

    /**
     * Gets driver_links
     * @return \BumbalClient\Model\LinkModel[]
     */
    public function getDriverLinks()
    {
        return $this->container['driver_links'];
    }

    /**
     * Sets driver_links
     * @param \BumbalClient\Model\LinkModel[] $driver_links 
     * @return $this
     */
    public function setDriverLinks($driver_links)
    {
        $this->container['driver_links'] = $driver_links;

        return $this;
    }

    /**
     * Gets car
     * @return \BumbalClient\Model\VehicleModel
     */
    public function getCar()
    {
        return $this->container['car'];
    }

    /**
     * Sets car
     * @param \BumbalClient\Model\VehicleModel $car 
     * @return $this
     */
    public function setCar($car)
    {
        $this->container['car'] = $car;

        return $this;
    }

    /**
     * Gets vehicle
     * @return \BumbalClient\Model\VehicleModel
     */
    public function getVehicle()
    {
        return $this->container['vehicle'];
    }

    /**
     * Sets vehicle
     * @param \BumbalClient\Model\VehicleModel $vehicle 
     * @return $this
     */
    public function setVehicle($vehicle)
    {
        $this->container['vehicle'] = $vehicle;

        return $this;
    }

    /**
     * Gets trailer
     * @return \BumbalClient\Model\TrailerModel
     */
    public function getTrailer()
    {
        return $this->container['trailer'];
    }

    /**
     * Sets trailer
     * @param \BumbalClient\Model\TrailerModel $trailer 
     * @return $this
     */
    public function setTrailer($trailer)
    {
        $this->container['trailer'] = $trailer;

        return $this;
    }

    /**
     * Gets activity_id_before
     * @return string
     */
    public function getActivityIdBefore()
    {
        return $this->container['activity_id_before'];
    }

    /**
     * Sets activity_id_before
     * @param string $activity_id_before Activity ID of the activity which must be performed before this activity
     * @return $this
     */
    public function setActivityIdBefore($activity_id_before)
    {
        $this->container['activity_id_before'] = $activity_id_before;

        return $this;
    }

    /**
     * Gets activity_id_after
     * @return string
     */
    public function getActivityIdAfter()
    {
        return $this->container['activity_id_after'];
    }

    /**
     * Sets activity_id_after
     * @param string $activity_id_after Activity ID of the activity which must be performed after this activity
     * @return $this
     */
    public function setActivityIdAfter($activity_id_after)
    {
        $this->container['activity_id_after'] = $activity_id_after;

        return $this;
    }

    /**
     * Gets bundled_activity_ids
     * @return int[]
     */
    public function getBundledActivityIds()
    {
        return $this->container['bundled_activity_ids'];
    }

    /**
     * Sets bundled_activity_ids
     * @param int[] $bundled_activity_ids Ids of activities within bundle activity
     * @return $this
     */
    public function setBundledActivityIds($bundled_activity_ids)
    {
        $this->container['bundled_activity_ids'] = $bundled_activity_ids;

        return $this;
    }

    /**
     * Gets tags
     * @return \BumbalClient\Model\TagModel[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \BumbalClient\Model\TagModel[] $tags 
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets recurrence
     * @return \BumbalClient\Model\RecurrenceModel
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     * @param \BumbalClient\Model\RecurrenceModel $recurrence 
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets tag_names
     * @return string[]
     */
    public function getTagNames()
    {
        return $this->container['tag_names'];
    }

    /**
     * Sets tag_names
     * @param string[] $tag_names Tag names
     * @return $this
     */
    public function setTagNames($tag_names)
    {
        $this->container['tag_names'] = $tag_names;

        return $this;
    }

    /**
     * Gets tag_ids
     * @return int[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     * @param int[] $tag_ids Tag type ids
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets zones
     * @return \BumbalClient\Model\ZoneModel[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     * @param \BumbalClient\Model\ZoneModel[] $zones 
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets zone_names
     * @return string[]
     */
    public function getZoneNames()
    {
        return $this->container['zone_names'];
    }

    /**
     * Sets zone_names
     * @param string[] $zone_names Zone names
     * @return $this
     */
    public function setZoneNames($zone_names)
    {
        $this->container['zone_names'] = $zone_names;

        return $this;
    }

    /**
     * Gets links
     * @return \BumbalClient\Model\LinkModel[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \BumbalClient\Model\LinkModel[] $links 
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets meta_data
     * @return \BumbalClient\Model\MetaDataModel[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     * @param \BumbalClient\Model\MetaDataModel[] $meta_data 
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets stats
     * @return \BumbalClient\Model\ActivityStatsModel
     */
    public function getStats()
    {
        return $this->container['stats'];
    }

    /**
     * Sets stats
     * @param \BumbalClient\Model\ActivityStatsModel $stats 
     * @return $this
     */
    public function setStats($stats)
    {
        $this->container['stats'] = $stats;

        return $this;
    }

    /**
     * Gets notes
     * @return \BumbalClient\Model\NoteModel[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param \BumbalClient\Model\NoteModel[] $notes 
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets files
     * @return \BumbalClient\Model\FileModel[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     * @param \BumbalClient\Model\FileModel[] $files 
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets activity_created_at
     * @return \DateTime
     */
    public function getActivityCreatedAt()
    {
        return $this->container['activity_created_at'];
    }

    /**
     * Sets activity_created_at
     * @param \DateTime $activity_created_at created_at date time
     * @return $this
     */
    public function setActivityCreatedAt($activity_created_at)
    {
        $this->container['activity_created_at'] = $activity_created_at;

        return $this;
    }

    /**
     * Gets activity_updated_at
     * @return \DateTime
     */
    public function getActivityUpdatedAt()
    {
        return $this->container['activity_updated_at'];
    }

    /**
     * Sets activity_updated_at
     * @param \DateTime $activity_updated_at updated_at date time
     * @return $this
     */
    public function setActivityUpdatedAt($activity_updated_at)
    {
        $this->container['activity_updated_at'] = $activity_updated_at;

        return $this;
    }

    /**
     * Gets activity_created_by
     * @return int
     */
    public function getActivityCreatedBy()
    {
        return $this->container['activity_created_by'];
    }

    /**
     * Sets activity_created_by
     * @param int $activity_created_by created_by user id
     * @return $this
     */
    public function setActivityCreatedBy($activity_created_by)
    {
        $this->container['activity_created_by'] = $activity_created_by;

        return $this;
    }

    /**
     * Gets activity_updated_by
     * @return int
     */
    public function getActivityUpdatedBy()
    {
        return $this->container['activity_updated_by'];
    }

    /**
     * Sets activity_updated_by
     * @param int $activity_updated_by updated_by user id
     * @return $this
     */
    public function setActivityUpdatedBy($activity_updated_by)
    {
        $this->container['activity_updated_by'] = $activity_updated_by;

        return $this;
    }

    /**
     * Gets activity_created_by_user
     * @return \BumbalClient\Model\UsersModel
     */
    public function getActivityCreatedByUser()
    {
        return $this->container['activity_created_by_user'];
    }

    /**
     * Sets activity_created_by_user
     * @param \BumbalClient\Model\UsersModel $activity_created_by_user 
     * @return $this
     */
    public function setActivityCreatedByUser($activity_created_by_user)
    {
        $this->container['activity_created_by_user'] = $activity_created_by_user;

        return $this;
    }

    /**
     * Gets activity_updated_by_user
     * @return \BumbalClient\Model\UsersModel
     */
    public function getActivityUpdatedByUser()
    {
        return $this->container['activity_updated_by_user'];
    }

    /**
     * Sets activity_updated_by_user
     * @param \BumbalClient\Model\UsersModel $activity_updated_by_user 
     * @return $this
     */
    public function setActivityUpdatedByUser($activity_updated_by_user)
    {
        $this->container['activity_updated_by_user'] = $activity_updated_by_user;

        return $this;
    }

    /**
     * Gets activity_active
     * @return bool
     */
    public function getActivityActive()
    {
        return $this->container['activity_active'];
    }

    /**
     * Sets activity_active
     * @param bool $activity_active Activity is active (=true). Inactive activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui.
     * @return $this
     */
    public function setActivityActive($activity_active)
    {
        $this->container['activity_active'] = $activity_active;

        return $this;
    }

    /**
     * Gets activity_removed
     * @return bool
     */
    public function getActivityRemoved()
    {
        return $this->container['activity_removed'];
    }

    /**
     * Sets activity_removed
     * @param bool $activity_removed Activity is removed (=true). Removed activities are not automatically considered in any of the application algorithms and will not be shown in the Bumbal Gui. Removed activities are usually irrepairable.
     * @return $this
     */
    public function setActivityRemoved($activity_removed)
    {
        $this->container['activity_removed'] = $activity_removed;

        return $this;
    }

    /**
     * Gets payment_total
     * @return int
     */
    public function getPaymentTotal()
    {
        return $this->container['payment_total'];
    }

    /**
     * Sets payment_total
     * @param int $payment_total Total to be paid in cents. readonly
     * @return $this
     */
    public function setPaymentTotal($payment_total)
    {
        $this->container['payment_total'] = $payment_total;

        return $this;
    }

    /**
     * Gets transaction_total
     * @return int
     */
    public function getTransactionTotal()
    {
        return $this->container['transaction_total'];
    }

    /**
     * Sets transaction_total
     * @param int $transaction_total Total has been paid in cents. readonly
     * @return $this
     */
    public function setTransactionTotal($transaction_total)
    {
        $this->container['transaction_total'] = $transaction_total;

        return $this;
    }

    /**
     * Gets due_total
     * @return int
     */
    public function getDueTotal()
    {
        return $this->container['due_total'];
    }

    /**
     * Sets due_total
     * @param int $due_total Amount which hasn't been paid yet in cents. readonly
     * @return $this
     */
    public function setDueTotal($due_total)
    {
        $this->container['due_total'] = $due_total;

        return $this;
    }

    /**
     * Gets transactions
     * @return \BumbalClient\Model\TransactionModel[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     * @param \BumbalClient\Model\TransactionModel[] $transactions 
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


