<?php
/**
 * DriverModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * DriverModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DriverModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DriverModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'pause_id' => 'int',
        'uuid' => 'string',
        'addresses' => '\BumbalClient\Model\AddressModel[]',
        'tag_names' => 'string[]',
        'tag_ids' => 'int[]',
        'first_name' => 'string',
        'last_name' => 'string',
        'name_prefix' => 'string',
        'full_name' => 'string',
        'email' => 'string',
        'tags' => '\BumbalClient\Model\TagModel[]',
        'zones' => '\BumbalClient\Model\ZoneModel[]',
        'zone_names' => 'string[]',
        'zone_ids' => 'int[]',
        'links' => '\BumbalClient\Model\LinkModel[]',
        'notes' => '\BumbalClient\Model\NoteModel[]',
        'removed' => 'bool',
        'active' => 'bool',
        'meta_data' => '\BumbalClient\Model\MetaDataModel[]',
        'files' => '\BumbalClient\Model\FileModel[]',
        'driver_created_at' => '\DateTime',
        'driver_updated_at' => '\DateTime',
        'driver_created_by' => 'int',
        'driver_updated_by' => 'int',
        'updated_by_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'pause_id' => null,
        'uuid' => null,
        'addresses' => null,
        'tag_names' => null,
        'tag_ids' => null,
        'first_name' => null,
        'last_name' => null,
        'name_prefix' => null,
        'full_name' => null,
        'email' => null,
        'tags' => null,
        'zones' => null,
        'zone_names' => null,
        'zone_ids' => null,
        'links' => null,
        'notes' => null,
        'removed' => null,
        'active' => null,
        'meta_data' => null,
        'files' => null,
        'driver_created_at' => 'date-time',
        'driver_updated_at' => 'date-time',
        'driver_created_by' => null,
        'driver_updated_by' => null,
        'updated_by_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'pause_id' => 'pause_id',
        'uuid' => 'uuid',
        'addresses' => 'addresses',
        'tag_names' => 'tag_names',
        'tag_ids' => 'tag_ids',
        'first_name' => 'first_name',
        'last_name' => 'last_name',
        'name_prefix' => 'name_prefix',
        'full_name' => 'full_name',
        'email' => 'email',
        'tags' => 'tags',
        'zones' => 'zones',
        'zone_names' => 'zone_names',
        'zone_ids' => 'zone_ids',
        'links' => 'links',
        'notes' => 'notes',
        'removed' => 'removed',
        'active' => 'active',
        'meta_data' => 'meta_data',
        'files' => 'files',
        'driver_created_at' => 'driver_created_at',
        'driver_updated_at' => 'driver_updated_at',
        'driver_created_by' => 'driver_created_by',
        'driver_updated_by' => 'driver_updated_by',
        'updated_by_name' => 'updated_by_name'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'pause_id' => 'setPauseId',
        'uuid' => 'setUuid',
        'addresses' => 'setAddresses',
        'tag_names' => 'setTagNames',
        'tag_ids' => 'setTagIds',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'name_prefix' => 'setNamePrefix',
        'full_name' => 'setFullName',
        'email' => 'setEmail',
        'tags' => 'setTags',
        'zones' => 'setZones',
        'zone_names' => 'setZoneNames',
        'zone_ids' => 'setZoneIds',
        'links' => 'setLinks',
        'notes' => 'setNotes',
        'removed' => 'setRemoved',
        'active' => 'setActive',
        'meta_data' => 'setMetaData',
        'files' => 'setFiles',
        'driver_created_at' => 'setDriverCreatedAt',
        'driver_updated_at' => 'setDriverUpdatedAt',
        'driver_created_by' => 'setDriverCreatedBy',
        'driver_updated_by' => 'setDriverUpdatedBy',
        'updated_by_name' => 'setUpdatedByName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'pause_id' => 'getPauseId',
        'uuid' => 'getUuid',
        'addresses' => 'getAddresses',
        'tag_names' => 'getTagNames',
        'tag_ids' => 'getTagIds',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'name_prefix' => 'getNamePrefix',
        'full_name' => 'getFullName',
        'email' => 'getEmail',
        'tags' => 'getTags',
        'zones' => 'getZones',
        'zone_names' => 'getZoneNames',
        'zone_ids' => 'getZoneIds',
        'links' => 'getLinks',
        'notes' => 'getNotes',
        'removed' => 'getRemoved',
        'active' => 'getActive',
        'meta_data' => 'getMetaData',
        'files' => 'getFiles',
        'driver_created_at' => 'getDriverCreatedAt',
        'driver_updated_at' => 'getDriverUpdatedAt',
        'driver_created_by' => 'getDriverCreatedBy',
        'driver_updated_by' => 'getDriverUpdatedBy',
        'updated_by_name' => 'getUpdatedByName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['pause_id'] = isset($data['pause_id']) ? $data['pause_id'] : null;
        $this->container['uuid'] = isset($data['uuid']) ? $data['uuid'] : null;
        $this->container['addresses'] = isset($data['addresses']) ? $data['addresses'] : null;
        $this->container['tag_names'] = isset($data['tag_names']) ? $data['tag_names'] : null;
        $this->container['tag_ids'] = isset($data['tag_ids']) ? $data['tag_ids'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['name_prefix'] = isset($data['name_prefix']) ? $data['name_prefix'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
        $this->container['zone_names'] = isset($data['zone_names']) ? $data['zone_names'] : null;
        $this->container['zone_ids'] = isset($data['zone_ids']) ? $data['zone_ids'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['removed'] = isset($data['removed']) ? $data['removed'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['meta_data'] = isset($data['meta_data']) ? $data['meta_data'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['driver_created_at'] = isset($data['driver_created_at']) ? $data['driver_created_at'] : null;
        $this->container['driver_updated_at'] = isset($data['driver_updated_at']) ? $data['driver_updated_at'] : null;
        $this->container['driver_created_by'] = isset($data['driver_created_by']) ? $data['driver_created_by'] : null;
        $this->container['driver_updated_by'] = isset($data['driver_updated_by']) ? $data['driver_updated_by'] : null;
        $this->container['updated_by_name'] = isset($data['updated_by_name']) ? $data['updated_by_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id Unique Identifier
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets pause_id
     * @return int
     */
    public function getPauseId()
    {
        return $this->container['pause_id'];
    }

    /**
     * Sets pause_id
     * @param int $pause_id id of pause scheme to apply
     * @return $this
     */
    public function setPauseId($pause_id)
    {
        $this->container['pause_id'] = $pause_id;

        return $this;
    }

    /**
     * Gets uuid
     * @return string
     */
    public function getUuid()
    {
        return $this->container['uuid'];
    }

    /**
     * Sets uuid
     * @param string $uuid unique per user
     * @return $this
     */
    public function setUuid($uuid)
    {
        $this->container['uuid'] = $uuid;

        return $this;
    }

    /**
     * Gets addresses
     * @return \BumbalClient\Model\AddressModel[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     * @param \BumbalClient\Model\AddressModel[] $addresses user address (mostly interesting for drivers)
     * @return $this
     */
    public function setAddresses($addresses)
    {
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets tag_names
     * @return string[]
     */
    public function getTagNames()
    {
        return $this->container['tag_names'];
    }

    /**
     * Sets tag_names
     * @param string[] $tag_names Tag names
     * @return $this
     */
    public function setTagNames($tag_names)
    {
        $this->container['tag_names'] = $tag_names;

        return $this;
    }

    /**
     * Gets tag_ids
     * @return int[]
     */
    public function getTagIds()
    {
        return $this->container['tag_ids'];
    }

    /**
     * Sets tag_ids
     * @param int[] $tag_ids Tag type ids
     * @return $this
     */
    public function setTagIds($tag_ids)
    {
        $this->container['tag_ids'] = $tag_ids;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name First Name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Last Name
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets name_prefix
     * @return string
     */
    public function getNamePrefix()
    {
        return $this->container['name_prefix'];
    }

    /**
     * Sets name_prefix
     * @param string $name_prefix Name Prefix
     * @return $this
     */
    public function setNamePrefix($name_prefix)
    {
        $this->container['name_prefix'] = $name_prefix;

        return $this;
    }

    /**
     * Gets full_name
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     * @param string $full_name Full name
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email Email
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets tags
     * @return \BumbalClient\Model\TagModel[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \BumbalClient\Model\TagModel[] $tags 
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets zones
     * @return \BumbalClient\Model\ZoneModel[]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     * @param \BumbalClient\Model\ZoneModel[] $zones 
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }

    /**
     * Gets zone_names
     * @return string[]
     */
    public function getZoneNames()
    {
        return $this->container['zone_names'];
    }

    /**
     * Sets zone_names
     * @param string[] $zone_names Zone names
     * @return $this
     */
    public function setZoneNames($zone_names)
    {
        $this->container['zone_names'] = $zone_names;

        return $this;
    }

    /**
     * Gets zone_ids
     * @return int[]
     */
    public function getZoneIds()
    {
        return $this->container['zone_ids'];
    }

    /**
     * Sets zone_ids
     * @param int[] $zone_ids Zone ids
     * @return $this
     */
    public function setZoneIds($zone_ids)
    {
        $this->container['zone_ids'] = $zone_ids;

        return $this;
    }

    /**
     * Gets links
     * @return \BumbalClient\Model\LinkModel[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     * @param \BumbalClient\Model\LinkModel[] $links 
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets notes
     * @return \BumbalClient\Model\NoteModel[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param \BumbalClient\Model\NoteModel[] $notes 
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets removed
     * @return bool
     */
    public function getRemoved()
    {
        return $this->container['removed'];
    }

    /**
     * Sets removed
     * @param bool $removed Whether user is removed or not
     * @return $this
     */
    public function setRemoved($removed)
    {
        $this->container['removed'] = $removed;

        return $this;
    }

    /**
     * Gets active
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     * @param bool $active Whether user is still active or not
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets meta_data
     * @return \BumbalClient\Model\MetaDataModel[]
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     * @param \BumbalClient\Model\MetaDataModel[] $meta_data 
     * @return $this
     */
    public function setMetaData($meta_data)
    {
        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets files
     * @return \BumbalClient\Model\FileModel[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     * @param \BumbalClient\Model\FileModel[] $files 
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets driver_created_at
     * @return \DateTime
     */
    public function getDriverCreatedAt()
    {
        return $this->container['driver_created_at'];
    }

    /**
     * Sets driver_created_at
     * @param \DateTime $driver_created_at created_at date time
     * @return $this
     */
    public function setDriverCreatedAt($driver_created_at)
    {
        $this->container['driver_created_at'] = $driver_created_at;

        return $this;
    }

    /**
     * Gets driver_updated_at
     * @return \DateTime
     */
    public function getDriverUpdatedAt()
    {
        return $this->container['driver_updated_at'];
    }

    /**
     * Sets driver_updated_at
     * @param \DateTime $driver_updated_at updated_at date time
     * @return $this
     */
    public function setDriverUpdatedAt($driver_updated_at)
    {
        $this->container['driver_updated_at'] = $driver_updated_at;

        return $this;
    }

    /**
     * Gets driver_created_by
     * @return int
     */
    public function getDriverCreatedBy()
    {
        return $this->container['driver_created_by'];
    }

    /**
     * Sets driver_created_by
     * @param int $driver_created_by created_by user id
     * @return $this
     */
    public function setDriverCreatedBy($driver_created_by)
    {
        $this->container['driver_created_by'] = $driver_created_by;

        return $this;
    }

    /**
     * Gets driver_updated_by
     * @return int
     */
    public function getDriverUpdatedBy()
    {
        return $this->container['driver_updated_by'];
    }

    /**
     * Sets driver_updated_by
     * @param int $driver_updated_by created_by user id
     * @return $this
     */
    public function setDriverUpdatedBy($driver_updated_by)
    {
        $this->container['driver_updated_by'] = $driver_updated_by;

        return $this;
    }

    /**
     * Gets updated_by_name
     * @return string
     */
    public function getUpdatedByName()
    {
        return $this->container['updated_by_name'];
    }

    /**
     * Sets updated_by_name
     * @param string $updated_by_name Driver updated by user full name
     * @return $this
     */
    public function setUpdatedByName($updated_by_name)
    {
        $this->container['updated_by_name'] = $updated_by_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


