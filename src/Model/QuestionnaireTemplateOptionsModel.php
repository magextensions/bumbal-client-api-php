<?php
/**
 * QuestionnaireTemplateOptionsModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  BumbalClient
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal Client Api
 *
 * Bumbal API documentation
 *
 * OpenAPI spec version: 2.0
 * Contact: gerb@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BumbalClient\Model;

use \ArrayAccess;

/**
 * QuestionnaireTemplateOptionsModel Class Doc Comment
 *
 * @category    Class
 * @package     BumbalClient
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class QuestionnaireTemplateOptionsModel implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'QuestionnaireTemplateOptionsModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'include_record_info' => 'bool',
        'include_questions' => 'bool',
        'include_options' => 'bool',
        'include_texts' => 'bool',
        'include_question_type_name' => 'bool',
        'include_zones' => 'bool',
        'include_brands' => 'bool',
        'include_tag_ids' => 'bool',
        'include_tag_names' => 'bool',
        'include_tags' => 'bool',
        'include_zone_ids' => 'bool',
        'include_zone_names' => 'bool',
        'include_brand_ids' => 'bool',
        'include_brand_names' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'include_record_info' => null,
        'include_questions' => null,
        'include_options' => null,
        'include_texts' => null,
        'include_question_type_name' => null,
        'include_zones' => null,
        'include_brands' => null,
        'include_tag_ids' => null,
        'include_tag_names' => null,
        'include_tags' => null,
        'include_zone_ids' => null,
        'include_zone_names' => null,
        'include_brand_ids' => null,
        'include_brand_names' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'include_record_info' => 'include_record_info',
        'include_questions' => 'include_questions',
        'include_options' => 'include_options',
        'include_texts' => 'include_texts',
        'include_question_type_name' => 'include_question_type_name',
        'include_zones' => 'include_zones',
        'include_brands' => 'include_brands',
        'include_tag_ids' => 'include_tag_ids',
        'include_tag_names' => 'include_tag_names',
        'include_tags' => 'include_tags',
        'include_zone_ids' => 'include_zone_ids',
        'include_zone_names' => 'include_zone_names',
        'include_brand_ids' => 'include_brand_ids',
        'include_brand_names' => 'include_brand_names'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'include_record_info' => 'setIncludeRecordInfo',
        'include_questions' => 'setIncludeQuestions',
        'include_options' => 'setIncludeOptions',
        'include_texts' => 'setIncludeTexts',
        'include_question_type_name' => 'setIncludeQuestionTypeName',
        'include_zones' => 'setIncludeZones',
        'include_brands' => 'setIncludeBrands',
        'include_tag_ids' => 'setIncludeTagIds',
        'include_tag_names' => 'setIncludeTagNames',
        'include_tags' => 'setIncludeTags',
        'include_zone_ids' => 'setIncludeZoneIds',
        'include_zone_names' => 'setIncludeZoneNames',
        'include_brand_ids' => 'setIncludeBrandIds',
        'include_brand_names' => 'setIncludeBrandNames'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'include_record_info' => 'getIncludeRecordInfo',
        'include_questions' => 'getIncludeQuestions',
        'include_options' => 'getIncludeOptions',
        'include_texts' => 'getIncludeTexts',
        'include_question_type_name' => 'getIncludeQuestionTypeName',
        'include_zones' => 'getIncludeZones',
        'include_brands' => 'getIncludeBrands',
        'include_tag_ids' => 'getIncludeTagIds',
        'include_tag_names' => 'getIncludeTagNames',
        'include_tags' => 'getIncludeTags',
        'include_zone_ids' => 'getIncludeZoneIds',
        'include_zone_names' => 'getIncludeZoneNames',
        'include_brand_ids' => 'getIncludeBrandIds',
        'include_brand_names' => 'getIncludeBrandNames'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['include_record_info'] = isset($data['include_record_info']) ? $data['include_record_info'] : null;
        $this->container['include_questions'] = isset($data['include_questions']) ? $data['include_questions'] : null;
        $this->container['include_options'] = isset($data['include_options']) ? $data['include_options'] : null;
        $this->container['include_texts'] = isset($data['include_texts']) ? $data['include_texts'] : null;
        $this->container['include_question_type_name'] = isset($data['include_question_type_name']) ? $data['include_question_type_name'] : null;
        $this->container['include_zones'] = isset($data['include_zones']) ? $data['include_zones'] : null;
        $this->container['include_brands'] = isset($data['include_brands']) ? $data['include_brands'] : null;
        $this->container['include_tag_ids'] = isset($data['include_tag_ids']) ? $data['include_tag_ids'] : null;
        $this->container['include_tag_names'] = isset($data['include_tag_names']) ? $data['include_tag_names'] : null;
        $this->container['include_tags'] = isset($data['include_tags']) ? $data['include_tags'] : null;
        $this->container['include_zone_ids'] = isset($data['include_zone_ids']) ? $data['include_zone_ids'] : null;
        $this->container['include_zone_names'] = isset($data['include_zone_names']) ? $data['include_zone_names'] : null;
        $this->container['include_brand_ids'] = isset($data['include_brand_ids']) ? $data['include_brand_ids'] : null;
        $this->container['include_brand_names'] = isset($data['include_brand_names']) ? $data['include_brand_names'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets include_record_info
     * @return bool
     */
    public function getIncludeRecordInfo()
    {
        return $this->container['include_record_info'];
    }

    /**
     * Sets include_record_info
     * @param bool $include_record_info 
     * @return $this
     */
    public function setIncludeRecordInfo($include_record_info)
    {
        $this->container['include_record_info'] = $include_record_info;

        return $this;
    }

    /**
     * Gets include_questions
     * @return bool
     */
    public function getIncludeQuestions()
    {
        return $this->container['include_questions'];
    }

    /**
     * Sets include_questions
     * @param bool $include_questions 
     * @return $this
     */
    public function setIncludeQuestions($include_questions)
    {
        $this->container['include_questions'] = $include_questions;

        return $this;
    }

    /**
     * Gets include_options
     * @return bool
     */
    public function getIncludeOptions()
    {
        return $this->container['include_options'];
    }

    /**
     * Sets include_options
     * @param bool $include_options 
     * @return $this
     */
    public function setIncludeOptions($include_options)
    {
        $this->container['include_options'] = $include_options;

        return $this;
    }

    /**
     * Gets include_texts
     * @return bool
     */
    public function getIncludeTexts()
    {
        return $this->container['include_texts'];
    }

    /**
     * Sets include_texts
     * @param bool $include_texts 
     * @return $this
     */
    public function setIncludeTexts($include_texts)
    {
        $this->container['include_texts'] = $include_texts;

        return $this;
    }

    /**
     * Gets include_question_type_name
     * @return bool
     */
    public function getIncludeQuestionTypeName()
    {
        return $this->container['include_question_type_name'];
    }

    /**
     * Sets include_question_type_name
     * @param bool $include_question_type_name 
     * @return $this
     */
    public function setIncludeQuestionTypeName($include_question_type_name)
    {
        $this->container['include_question_type_name'] = $include_question_type_name;

        return $this;
    }

    /**
     * Gets include_zones
     * @return bool
     */
    public function getIncludeZones()
    {
        return $this->container['include_zones'];
    }

    /**
     * Sets include_zones
     * @param bool $include_zones 
     * @return $this
     */
    public function setIncludeZones($include_zones)
    {
        $this->container['include_zones'] = $include_zones;

        return $this;
    }

    /**
     * Gets include_brands
     * @return bool
     */
    public function getIncludeBrands()
    {
        return $this->container['include_brands'];
    }

    /**
     * Sets include_brands
     * @param bool $include_brands 
     * @return $this
     */
    public function setIncludeBrands($include_brands)
    {
        $this->container['include_brands'] = $include_brands;

        return $this;
    }

    /**
     * Gets include_tag_ids
     * @return bool
     */
    public function getIncludeTagIds()
    {
        return $this->container['include_tag_ids'];
    }

    /**
     * Sets include_tag_ids
     * @param bool $include_tag_ids 
     * @return $this
     */
    public function setIncludeTagIds($include_tag_ids)
    {
        $this->container['include_tag_ids'] = $include_tag_ids;

        return $this;
    }

    /**
     * Gets include_tag_names
     * @return bool
     */
    public function getIncludeTagNames()
    {
        return $this->container['include_tag_names'];
    }

    /**
     * Sets include_tag_names
     * @param bool $include_tag_names 
     * @return $this
     */
    public function setIncludeTagNames($include_tag_names)
    {
        $this->container['include_tag_names'] = $include_tag_names;

        return $this;
    }

    /**
     * Gets include_tags
     * @return bool
     */
    public function getIncludeTags()
    {
        return $this->container['include_tags'];
    }

    /**
     * Sets include_tags
     * @param bool $include_tags 
     * @return $this
     */
    public function setIncludeTags($include_tags)
    {
        $this->container['include_tags'] = $include_tags;

        return $this;
    }

    /**
     * Gets include_zone_ids
     * @return bool
     */
    public function getIncludeZoneIds()
    {
        return $this->container['include_zone_ids'];
    }

    /**
     * Sets include_zone_ids
     * @param bool $include_zone_ids 
     * @return $this
     */
    public function setIncludeZoneIds($include_zone_ids)
    {
        $this->container['include_zone_ids'] = $include_zone_ids;

        return $this;
    }

    /**
     * Gets include_zone_names
     * @return bool
     */
    public function getIncludeZoneNames()
    {
        return $this->container['include_zone_names'];
    }

    /**
     * Sets include_zone_names
     * @param bool $include_zone_names 
     * @return $this
     */
    public function setIncludeZoneNames($include_zone_names)
    {
        $this->container['include_zone_names'] = $include_zone_names;

        return $this;
    }

    /**
     * Gets include_brand_ids
     * @return bool
     */
    public function getIncludeBrandIds()
    {
        return $this->container['include_brand_ids'];
    }

    /**
     * Sets include_brand_ids
     * @param bool $include_brand_ids 
     * @return $this
     */
    public function setIncludeBrandIds($include_brand_ids)
    {
        $this->container['include_brand_ids'] = $include_brand_ids;

        return $this;
    }

    /**
     * Gets include_brand_names
     * @return bool
     */
    public function getIncludeBrandNames()
    {
        return $this->container['include_brand_names'];
    }

    /**
     * Sets include_brand_names
     * @param bool $include_brand_names 
     * @return $this
     */
    public function setIncludeBrandNames($include_brand_names)
    {
        $this->container['include_brand_names'] = $include_brand_names;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\BumbalClient\ObjectSerializer::sanitizeForSerialization($this));
    }
}


